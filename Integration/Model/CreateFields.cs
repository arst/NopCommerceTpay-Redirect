/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CreateFields
    /// </summary>
    [DataContract]
    public partial class CreateFields :  IEquatable<CreateFields>, IValidatableObject
    {
        /// <summary>
        /// customer language
        /// </summary>
        /// <value>customer language</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageEnum
        {
            
            /// <summary>
            /// Enum Pl for value: pl
            /// </summary>
            [EnumMember(Value = "pl")]
            Pl = 1,
            
            /// <summary>
            /// Enum En for value: en
            /// </summary>
            [EnumMember(Value = "en")]
            En = 2,
            
            /// <summary>
            /// Enum De for value: de
            /// </summary>
            [EnumMember(Value = "de")]
            De = 3
        }

        /// <summary>
        /// customer language
        /// </summary>
        /// <value>customer language</value>
        [DataMember(Name="language", EmitDefaultValue=false)]
        public LanguageEnum? Language { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFields" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateFields() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateFields" /> class.
        /// </summary>
        /// <param name="Id">merchant id from tpay.com system (required).</param>
        /// <param name="Amount">transaction amount (required).</param>
        /// <param name="Description">Transaction description (required).</param>
        /// <param name="Crc">Auxiliary parameter to identify the transaction on the merchant side..</param>
        /// <param name="Md5sum">md5 sum calculated from id.kwota.crc.security_code (security code can be found in merchant panel). (required).</param>
        /// <param name="Online">shows only banks booking online at the moment.</param>
        /// <param name="Group">transaction group number see https://secure.tpay.com/groups-{id}0.js for example https://secure.tpay.com/groups-10100.js or https://secure.tpay.com/groups-10100.js?json (required).</param>
        /// <param name="ResultUrl">result url for system notification.</param>
        /// <param name="ResultEmail">email address where notification after payment will be sent.</param>
        /// <param name="MerchantDescription">name of merchant displayed in transaction panel (overrides defined in merchant panel).</param>
        /// <param name="CustomDescription">additional info to be displayed in transaction panel (overrides defined in merchant panel).</param>
        /// <param name="ReturnUrl">ReturnUrl.</param>
        /// <param name="ReturnErrorUrl">ReturnErrorUrl.</param>
        /// <param name="Language">customer language (default to LanguageEnum.Pl).</param>
        /// <param name="Email">Email (required).</param>
        /// <param name="Name">Name (required).</param>
        /// <param name="Address">Address.</param>
        /// <param name="City">City.</param>
        /// <param name="Zip">Zip.</param>
        /// <param name="Country">Country.</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="AcceptTos">acceptance of tpay.com regulations.</param>
        /// <param name="ApiPassword">ApiPassword (required).</param>
        public CreateFields(int? Id = default(int?), decimal? Amount = default(decimal?), string Description = default(string), string Crc = default(string), string Md5sum = default(string), int? Online = default(int?), int? Group = default(int?), string ResultUrl = default(string), string ResultEmail = default(string), string MerchantDescription = default(string), string CustomDescription = default(string), PowUrl ReturnUrl = default(PowUrl), PowUrlBlad ReturnErrorUrl = default(PowUrlBlad), LanguageEnum? Language = LanguageEnum.Pl, Email Email = default(Email), Name Name = default(Name), Address Address = default(Address), City City = default(City), Code Zip = default(Code), Country Country = default(Country), Phone Phone = default(Phone), int? AcceptTos = default(int?), ApiPassword ApiPassword = default(ApiPassword))
        {
            // to ensure "Id" is required (not null)
            if (Id == null)
            {
                throw new InvalidDataException("Id is a required property for CreateFields and cannot be null");
            }
            else
            {
                this.Id = Id;
            }
            // to ensure "Amount" is required (not null)
            if (Amount == null)
            {
                throw new InvalidDataException("Amount is a required property for CreateFields and cannot be null");
            }
            else
            {
                this.Amount = Amount;
            }
            // to ensure "Description" is required (not null)
            if (Description == null)
            {
                throw new InvalidDataException("Description is a required property for CreateFields and cannot be null");
            }
            else
            {
                this.Description = Description;
            }
            // to ensure "Md5sum" is required (not null)
            if (Md5sum == null)
            {
                throw new InvalidDataException("Md5sum is a required property for CreateFields and cannot be null");
            }
            else
            {
                this.Md5sum = Md5sum;
            }
            // to ensure "Group" is required (not null)
            if (Group == null)
            {
                throw new InvalidDataException("Group is a required property for CreateFields and cannot be null");
            }
            else
            {
                this.Group = Group;
            }
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for CreateFields and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for CreateFields and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "ApiPassword" is required (not null)
            if (ApiPassword == null)
            {
                throw new InvalidDataException("ApiPassword is a required property for CreateFields and cannot be null");
            }
            else
            {
                this.ApiPassword = ApiPassword;
            }
            this.Crc = Crc;
            this.Online = Online;
            this.ResultUrl = ResultUrl;
            this.ResultEmail = ResultEmail;
            this.MerchantDescription = MerchantDescription;
            this.CustomDescription = CustomDescription;
            this.ReturnUrl = ReturnUrl;
            this.ReturnErrorUrl = ReturnErrorUrl;
            // use default value if no "Language" provided
            if (Language == null)
            {
                this.Language = LanguageEnum.Pl;
            }
            else
            {
                this.Language = Language;
            }
            this.Address = Address;
            this.City = City;
            this.Zip = Zip;
            this.Country = Country;
            this.Phone = Phone;
            this.AcceptTos = AcceptTos;
        }
        
        /// <summary>
        /// merchant id from tpay.com system
        /// </summary>
        /// <value>merchant id from tpay.com system</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// transaction amount
        /// </summary>
        /// <value>transaction amount</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Transaction description
        /// </summary>
        /// <value>Transaction description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Auxiliary parameter to identify the transaction on the merchant side.
        /// </summary>
        /// <value>Auxiliary parameter to identify the transaction on the merchant side.</value>
        [DataMember(Name="crc", EmitDefaultValue=false)]
        public string Crc { get; set; }

        /// <summary>
        /// md5 sum calculated from id.kwota.crc.security_code (security code can be found in merchant panel).
        /// </summary>
        /// <value>md5 sum calculated from id.kwota.crc.security_code (security code can be found in merchant panel).</value>
        [DataMember(Name="md5sum", EmitDefaultValue=false)]
        public string Md5sum { get; set; }

        /// <summary>
        /// shows only banks booking online at the moment
        /// </summary>
        /// <value>shows only banks booking online at the moment</value>
        [DataMember(Name="online", EmitDefaultValue=false)]
        public int? Online { get; set; }

        /// <summary>
        /// transaction group number see https://secure.tpay.com/groups-{id}0.js for example https://secure.tpay.com/groups-10100.js or https://secure.tpay.com/groups-10100.js?json
        /// </summary>
        /// <value>transaction group number see https://secure.tpay.com/groups-{id}0.js for example https://secure.tpay.com/groups-10100.js or https://secure.tpay.com/groups-10100.js?json</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public int? Group { get; set; }

        /// <summary>
        /// result url for system notification
        /// </summary>
        /// <value>result url for system notification</value>
        [DataMember(Name="result_url", EmitDefaultValue=false)]
        public string ResultUrl { get; set; }

        /// <summary>
        /// email address where notification after payment will be sent
        /// </summary>
        /// <value>email address where notification after payment will be sent</value>
        [DataMember(Name="result_email", EmitDefaultValue=false)]
        public string ResultEmail { get; set; }

        /// <summary>
        /// name of merchant displayed in transaction panel (overrides defined in merchant panel)
        /// </summary>
        /// <value>name of merchant displayed in transaction panel (overrides defined in merchant panel)</value>
        [DataMember(Name="merchant_description", EmitDefaultValue=false)]
        public string MerchantDescription { get; set; }

        /// <summary>
        /// additional info to be displayed in transaction panel (overrides defined in merchant panel)
        /// </summary>
        /// <value>additional info to be displayed in transaction panel (overrides defined in merchant panel)</value>
        [DataMember(Name="custom_description", EmitDefaultValue=false)]
        public string CustomDescription { get; set; }

        /// <summary>
        /// Gets or Sets ReturnUrl
        /// </summary>
        [DataMember(Name="return_url", EmitDefaultValue=false)]
        public PowUrl ReturnUrl { get; set; }

        /// <summary>
        /// Gets or Sets ReturnErrorUrl
        /// </summary>
        [DataMember(Name="return_error_url", EmitDefaultValue=false)]
        public PowUrlBlad ReturnErrorUrl { get; set; }


        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public Email Email { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public Name Name { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public City City { get; set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public Code Zip { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public Country Country { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public Phone Phone { get; set; }

        /// <summary>
        /// acceptance of tpay.com regulations
        /// </summary>
        /// <value>acceptance of tpay.com regulations</value>
        [DataMember(Name="accept_tos", EmitDefaultValue=false)]
        public int? AcceptTos { get; set; }

        /// <summary>
        /// Gets or Sets ApiPassword
        /// </summary>
        [DataMember(Name="api_password", EmitDefaultValue=false)]
        public ApiPassword ApiPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateFields {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Crc: ").Append(Crc).Append("\n");
            sb.Append("  Md5sum: ").Append(Md5sum).Append("\n");
            sb.Append("  Online: ").Append(Online).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  ResultUrl: ").Append(ResultUrl).Append("\n");
            sb.Append("  ResultEmail: ").Append(ResultEmail).Append("\n");
            sb.Append("  MerchantDescription: ").Append(MerchantDescription).Append("\n");
            sb.Append("  CustomDescription: ").Append(CustomDescription).Append("\n");
            sb.Append("  ReturnUrl: ").Append(ReturnUrl).Append("\n");
            sb.Append("  ReturnErrorUrl: ").Append(ReturnErrorUrl).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  AcceptTos: ").Append(AcceptTos).Append("\n");
            sb.Append("  ApiPassword: ").Append(ApiPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateFields);
        }

        /// <summary>
        /// Returns true if CreateFields instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Crc == input.Crc ||
                    (this.Crc != null &&
                    this.Crc.Equals(input.Crc))
                ) && 
                (
                    this.Md5sum == input.Md5sum ||
                    (this.Md5sum != null &&
                    this.Md5sum.Equals(input.Md5sum))
                ) && 
                (
                    this.Online == input.Online ||
                    (this.Online != null &&
                    this.Online.Equals(input.Online))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.ResultUrl == input.ResultUrl ||
                    (this.ResultUrl != null &&
                    this.ResultUrl.Equals(input.ResultUrl))
                ) && 
                (
                    this.ResultEmail == input.ResultEmail ||
                    (this.ResultEmail != null &&
                    this.ResultEmail.Equals(input.ResultEmail))
                ) && 
                (
                    this.MerchantDescription == input.MerchantDescription ||
                    (this.MerchantDescription != null &&
                    this.MerchantDescription.Equals(input.MerchantDescription))
                ) && 
                (
                    this.CustomDescription == input.CustomDescription ||
                    (this.CustomDescription != null &&
                    this.CustomDescription.Equals(input.CustomDescription))
                ) && 
                (
                    this.ReturnUrl == input.ReturnUrl ||
                    (this.ReturnUrl != null &&
                    this.ReturnUrl.Equals(input.ReturnUrl))
                ) && 
                (
                    this.ReturnErrorUrl == input.ReturnErrorUrl ||
                    (this.ReturnErrorUrl != null &&
                    this.ReturnErrorUrl.Equals(input.ReturnErrorUrl))
                ) && 
                (
                    this.Language == input.Language ||
                    (this.Language != null &&
                    this.Language.Equals(input.Language))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.AcceptTos == input.AcceptTos ||
                    (this.AcceptTos != null &&
                    this.AcceptTos.Equals(input.AcceptTos))
                ) && 
                (
                    this.ApiPassword == input.ApiPassword ||
                    (this.ApiPassword != null &&
                    this.ApiPassword.Equals(input.ApiPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Crc != null)
                    hashCode = hashCode * 59 + this.Crc.GetHashCode();
                if (this.Md5sum != null)
                    hashCode = hashCode * 59 + this.Md5sum.GetHashCode();
                if (this.Online != null)
                    hashCode = hashCode * 59 + this.Online.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.ResultUrl != null)
                    hashCode = hashCode * 59 + this.ResultUrl.GetHashCode();
                if (this.ResultEmail != null)
                    hashCode = hashCode * 59 + this.ResultEmail.GetHashCode();
                if (this.MerchantDescription != null)
                    hashCode = hashCode * 59 + this.MerchantDescription.GetHashCode();
                if (this.CustomDescription != null)
                    hashCode = hashCode * 59 + this.CustomDescription.GetHashCode();
                if (this.ReturnUrl != null)
                    hashCode = hashCode * 59 + this.ReturnUrl.GetHashCode();
                if (this.ReturnErrorUrl != null)
                    hashCode = hashCode * 59 + this.ReturnErrorUrl.GetHashCode();
                if (this.Language != null)
                    hashCode = hashCode * 59 + this.Language.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Zip != null)
                    hashCode = hashCode * 59 + this.Zip.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.AcceptTos != null)
                    hashCode = hashCode * 59 + this.AcceptTos.GetHashCode();
                if (this.ApiPassword != null)
                    hashCode = hashCode * 59 + this.ApiPassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Amount (decimal?) minimum
            if(this.Amount < (decimal?)0.01)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Amount, must be a value greater than or equal to 0.01.", new [] { "Amount" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 128.", new [] { "Description" });
            }

            // Md5sum (string) maxLength
            if(this.Md5sum != null && this.Md5sum.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Md5sum, length must be less than 32.", new [] { "Md5sum" });
            }

            // Md5sum (string) minLength
            if(this.Md5sum != null && this.Md5sum.Length < 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Md5sum, length must be greater than 32.", new [] { "Md5sum" });
            }

            // ResultUrl (string) maxLength
            if(this.ResultUrl != null && this.ResultUrl.Length > 512)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResultUrl, length must be less than 512.", new [] { "ResultUrl" });
            }

            // ResultEmail (string) maxLength
            if(this.ResultEmail != null && this.ResultEmail.Length > 256)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResultEmail, length must be less than 256.", new [] { "ResultEmail" });
            }

            // MerchantDescription (string) maxLength
            if(this.MerchantDescription != null && this.MerchantDescription.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MerchantDescription, length must be less than 128.", new [] { "MerchantDescription" });
            }

            // CustomDescription (string) maxLength
            if(this.CustomDescription != null && this.CustomDescription.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CustomDescription, length must be less than 32.", new [] { "CustomDescription" });
            }

            yield break;
        }
    }

}

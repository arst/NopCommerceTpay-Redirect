/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// GetResponse
    /// </summary>
    [DataContract]
    public partial class GetResponse :  IEquatable<GetResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Correct for value: correct
            /// </summary>
            [EnumMember(Value = "correct")]
            Correct = 1,
            
            /// <summary>
            /// Enum Paid for value: paid
            /// </summary>
            [EnumMember(Value = "paid")]
            Paid = 2,
            
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 3,
            
            /// <summary>
            /// Enum Error for value: error
            /// </summary>
            [EnumMember(Value = "error")]
            Error = 4,
            
            /// <summary>
            /// Enum Chargeback for value: chargeback
            /// </summary>
            [EnumMember(Value = "chargeback")]
            Chargeback = 5
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Depending on setting in merchant panel, error_code may be different than none for correct status, when acceptance of overpays and surcharges has been set.
        /// </summary>
        /// <value>Depending on setting in merchant panel, error_code may be different than none for correct status, when acceptance of overpays and surcharges has been set.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ErrorCodeEnum
        {
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Overpay for value: overpay
            /// </summary>
            [EnumMember(Value = "overpay")]
            Overpay = 2,
            
            /// <summary>
            /// Enum Surcharge for value: surcharge
            /// </summary>
            [EnumMember(Value = "surcharge")]
            Surcharge = 3
        }

        /// <summary>
        /// Depending on setting in merchant panel, error_code may be different than none for correct status, when acceptance of overpays and surcharges has been set.
        /// </summary>
        /// <value>Depending on setting in merchant panel, error_code may be different than none for correct status, when acceptance of overpays and surcharges has been set.</value>
        [DataMember(Name="error_code", EmitDefaultValue=false)]
        public ErrorCodeEnum? ErrorCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetResponse" /> class.
        /// </summary>
        /// <param name="Result">Result.</param>
        /// <param name="Status">Status.</param>
        /// <param name="ErrorCode">Depending on setting in merchant panel, error_code may be different than none for correct status, when acceptance of overpays and surcharges has been set..</param>
        /// <param name="StartTime">Transaction creation time.</param>
        /// <param name="PaymentTime">Date of payment or empty for pending transactions.</param>
        /// <param name="ChargebackTime">Date of payment refund or empty for not refunded transactions.</param>
        /// <param name="Channel">Payment channel ID can be recognised in merchant panel (your offer section).</param>
        /// <param name="TestMode">Returns 1 if transaction was in test mode.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="AmountPaid">The amount paid by customer.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Email">Email.</param>
        /// <param name="Address">Address.</param>
        /// <param name="Code">Code.</param>
        /// <param name="City">City.</param>
        /// <param name="Phone">Phone.</param>
        /// <param name="Country">Country.</param>
        /// <param name="Err">Err.</param>
        public GetResponse(Result Result = default(Result), StatusEnum? Status = default(StatusEnum?), ErrorCodeEnum? ErrorCode = default(ErrorCodeEnum?), string StartTime = default(string), string PaymentTime = default(string), string ChargebackTime = default(string), int? Channel = default(int?), int? TestMode = default(int?), Amount Amount = default(Amount), decimal? AmountPaid = default(decimal?), Name Name = default(Name), Email Email = default(Email), Address Address = default(Address), Code Code = default(Code), City City = default(City), Phone Phone = default(Phone), Country Country = default(Country), TransactionErrorCodes Err = default(TransactionErrorCodes))
        {
            this.Result = Result;
            this.Status = Status;
            this.ErrorCode = ErrorCode;
            this.StartTime = StartTime;
            this.PaymentTime = PaymentTime;
            this.ChargebackTime = ChargebackTime;
            this.Channel = Channel;
            this.TestMode = TestMode;
            this.Amount = Amount;
            this.AmountPaid = AmountPaid;
            this.Name = Name;
            this.Email = Email;
            this.Address = Address;
            this.Code = Code;
            this.City = City;
            this.Phone = Phone;
            this.Country = Country;
            this.Err = Err;
        }
        
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public Result Result { get; set; }



        /// <summary>
        /// Transaction creation time
        /// </summary>
        /// <value>Transaction creation time</value>
        [DataMember(Name="start_time", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Date of payment or empty for pending transactions
        /// </summary>
        /// <value>Date of payment or empty for pending transactions</value>
        [DataMember(Name="payment_time", EmitDefaultValue=false)]
        public string PaymentTime { get; set; }

        /// <summary>
        /// Date of payment refund or empty for not refunded transactions
        /// </summary>
        /// <value>Date of payment refund or empty for not refunded transactions</value>
        [DataMember(Name="chargeback_time", EmitDefaultValue=false)]
        public string ChargebackTime { get; set; }

        /// <summary>
        /// Payment channel ID can be recognised in merchant panel (your offer section)
        /// </summary>
        /// <value>Payment channel ID can be recognised in merchant panel (your offer section)</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public int? Channel { get; set; }

        /// <summary>
        /// Returns 1 if transaction was in test mode
        /// </summary>
        /// <value>Returns 1 if transaction was in test mode</value>
        [DataMember(Name="test_mode", EmitDefaultValue=false)]
        public int? TestMode { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// The amount paid by customer
        /// </summary>
        /// <value>The amount paid by customer</value>
        [DataMember(Name="amount_paid", EmitDefaultValue=false)]
        public decimal? AmountPaid { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public Name Name { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public Email Email { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public Code Code { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public City City { get; set; }

        /// <summary>
        /// Gets or Sets Phone
        /// </summary>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public Phone Phone { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public Country Country { get; set; }

        /// <summary>
        /// Gets or Sets Err
        /// </summary>
        [DataMember(Name="err", EmitDefaultValue=false)]
        public TransactionErrorCodes Err { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetResponse {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  PaymentTime: ").Append(PaymentTime).Append("\n");
            sb.Append("  ChargebackTime: ").Append(ChargebackTime).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountPaid: ").Append(AmountPaid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Err: ").Append(Err).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetResponse);
        }

        /// <summary>
        /// Returns true if GetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    (this.ErrorCode != null &&
                    this.ErrorCode.Equals(input.ErrorCode))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.PaymentTime == input.PaymentTime ||
                    (this.PaymentTime != null &&
                    this.PaymentTime.Equals(input.PaymentTime))
                ) && 
                (
                    this.ChargebackTime == input.ChargebackTime ||
                    (this.ChargebackTime != null &&
                    this.ChargebackTime.Equals(input.ChargebackTime))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    (this.TestMode != null &&
                    this.TestMode.Equals(input.TestMode))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AmountPaid == input.AmountPaid ||
                    (this.AmountPaid != null &&
                    this.AmountPaid.Equals(input.AmountPaid))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Err == input.Err ||
                    (this.Err != null &&
                    this.Err.Equals(input.Err))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ErrorCode != null)
                    hashCode = hashCode * 59 + this.ErrorCode.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.PaymentTime != null)
                    hashCode = hashCode * 59 + this.PaymentTime.GetHashCode();
                if (this.ChargebackTime != null)
                    hashCode = hashCode * 59 + this.ChargebackTime.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.TestMode != null)
                    hashCode = hashCode * 59 + this.TestMode.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AmountPaid != null)
                    hashCode = hashCode * 59 + this.AmountPaid.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Err != null)
                    hashCode = hashCode * 59 + this.Err.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StartTime (string) pattern
            Regex regexStartTime = new Regex(@"YYYY-MM-DD HH:mm:ss", RegexOptions.CultureInvariant);
            if (false == regexStartTime.Match(this.StartTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StartTime, must match a pattern of " + regexStartTime, new [] { "StartTime" });
            }

            // PaymentTime (string) pattern
            Regex regexPaymentTime = new Regex(@"YYYY-MM-DD HH:mm:ss", RegexOptions.CultureInvariant);
            if (false == regexPaymentTime.Match(this.PaymentTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PaymentTime, must match a pattern of " + regexPaymentTime, new [] { "PaymentTime" });
            }

            // ChargebackTime (string) pattern
            Regex regexChargebackTime = new Regex(@"YYYY-MM-DD HH:mm:ss", RegexOptions.CultureInvariant);
            if (false == regexChargebackTime.Match(this.ChargebackTime).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChargebackTime, must match a pattern of " + regexChargebackTime, new [] { "ChargebackTime" });
            }

            // AmountPaid (decimal?) minimum
            if(this.AmountPaid < (decimal?)0.01)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AmountPaid, must be a value greater than or equal to 0.01.", new [] { "AmountPaid" });
            }

            yield break;
        }
    }

}

/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Successful response schema
    /// </summary>
    [DataContract]
    public partial class RegisterSaleResponse :  IEquatable<RegisterSaleResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterSaleResponse" /> class.
        /// </summary>
        /// <param name="Result">Result.</param>
        /// <param name="SaleAuth">SaleAuth.</param>
        /// <param name="ErrCode">ErrCode.</param>
        /// <param name="ErrDesc">ErrDesc.</param>
        public RegisterSaleResponse(Result Result = default(Result), SaleAuth SaleAuth = default(SaleAuth), CardsErrCode ErrCode = default(CardsErrCode), CardsErrDesc ErrDesc = default(CardsErrDesc))
        {
            this.Result = Result;
            this.SaleAuth = SaleAuth;
            this.ErrCode = ErrCode;
            this.ErrDesc = ErrDesc;
        }
        
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public Result Result { get; set; }

        /// <summary>
        /// Gets or Sets SaleAuth
        /// </summary>
        [DataMember(Name="sale_auth", EmitDefaultValue=false)]
        public SaleAuth SaleAuth { get; set; }

        /// <summary>
        /// Gets or Sets ErrCode
        /// </summary>
        [DataMember(Name="err_code", EmitDefaultValue=false)]
        public CardsErrCode ErrCode { get; set; }

        /// <summary>
        /// Gets or Sets ErrDesc
        /// </summary>
        [DataMember(Name="err_desc", EmitDefaultValue=false)]
        public CardsErrDesc ErrDesc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterSaleResponse {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  SaleAuth: ").Append(SaleAuth).Append("\n");
            sb.Append("  ErrCode: ").Append(ErrCode).Append("\n");
            sb.Append("  ErrDesc: ").Append(ErrDesc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterSaleResponse);
        }

        /// <summary>
        /// Returns true if RegisterSaleResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterSaleResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterSaleResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.SaleAuth == input.SaleAuth ||
                    (this.SaleAuth != null &&
                    this.SaleAuth.Equals(input.SaleAuth))
                ) && 
                (
                    this.ErrCode == input.ErrCode ||
                    (this.ErrCode != null &&
                    this.ErrCode.Equals(input.ErrCode))
                ) && 
                (
                    this.ErrDesc == input.ErrDesc ||
                    (this.ErrDesc != null &&
                    this.ErrDesc.Equals(input.ErrDesc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.SaleAuth != null)
                    hashCode = hashCode * 59 + this.SaleAuth.GetHashCode();
                if (this.ErrCode != null)
                    hashCode = hashCode * 59 + this.ErrCode.GetHashCode();
                if (this.ErrDesc != null)
                    hashCode = hashCode * 59 + this.ErrDesc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

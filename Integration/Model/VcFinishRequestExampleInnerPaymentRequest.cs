/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VcFinishRequestExampleInnerPaymentRequest
    /// </summary>
    [DataContract]
    public partial class VcFinishRequestExampleInnerPaymentRequest :  IEquatable<VcFinishRequestExampleInnerPaymentRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VcFinishRequestExampleInnerPaymentRequest" /> class.
        /// </summary>
        /// <param name="CurrencyCode">The currency with which to process the transaction..</param>
        /// <param name="Total">Total of the payment including all amounts..</param>
        /// <param name="OrderId">Merchant&#39;s order ID associated with the payment.</param>
        /// <param name="Description">Description associated with the payment..</param>
        /// <param name="Subtotal">Subtotal of the payment..</param>
        /// <param name="ShippingHandling">Total of shipping and handling charges in the payment..</param>
        /// <param name="Tax">Total tax-related charges in the payment..</param>
        /// <param name="Discount">Total of discounts related to the payment. If provided, it is a positive value representing the amount to be deducted from the total..</param>
        /// <param name="GiftWrap">Total gift-wrapping charges in the payment..</param>
        /// <param name="Misc">Total uncategorized charges in the payment..</param>
        /// <param name="PromoCode">Promotion codes associated with the payment..</param>
        public VcFinishRequestExampleInnerPaymentRequest(string CurrencyCode = default(string), string Total = default(string), string OrderId = default(string), string Description = default(string), string Subtotal = default(string), string ShippingHandling = default(string), string Tax = default(string), string Discount = default(string), string GiftWrap = default(string), string Misc = default(string), string PromoCode = default(string))
        {
            this.CurrencyCode = CurrencyCode;
            this.Total = Total;
            this.OrderId = OrderId;
            this.Description = Description;
            this.Subtotal = Subtotal;
            this.ShippingHandling = ShippingHandling;
            this.Tax = Tax;
            this.Discount = Discount;
            this.GiftWrap = GiftWrap;
            this.Misc = Misc;
            this.PromoCode = PromoCode;
        }
        
        /// <summary>
        /// The currency with which to process the transaction.
        /// </summary>
        /// <value>The currency with which to process the transaction.</value>
        [DataMember(Name="currencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// Total of the payment including all amounts.
        /// </summary>
        /// <value>Total of the payment including all amounts.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public string Total { get; set; }

        /// <summary>
        /// Merchant&#39;s order ID associated with the payment
        /// </summary>
        /// <value>Merchant&#39;s order ID associated with the payment</value>
        [DataMember(Name="orderId", EmitDefaultValue=false)]
        public string OrderId { get; set; }

        /// <summary>
        /// Description associated with the payment.
        /// </summary>
        /// <value>Description associated with the payment.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Subtotal of the payment.
        /// </summary>
        /// <value>Subtotal of the payment.</value>
        [DataMember(Name="subtotal", EmitDefaultValue=false)]
        public string Subtotal { get; set; }

        /// <summary>
        /// Total of shipping and handling charges in the payment.
        /// </summary>
        /// <value>Total of shipping and handling charges in the payment.</value>
        [DataMember(Name="shippingHandling", EmitDefaultValue=false)]
        public string ShippingHandling { get; set; }

        /// <summary>
        /// Total tax-related charges in the payment.
        /// </summary>
        /// <value>Total tax-related charges in the payment.</value>
        [DataMember(Name="tax", EmitDefaultValue=false)]
        public string Tax { get; set; }

        /// <summary>
        /// Total of discounts related to the payment. If provided, it is a positive value representing the amount to be deducted from the total.
        /// </summary>
        /// <value>Total of discounts related to the payment. If provided, it is a positive value representing the amount to be deducted from the total.</value>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public string Discount { get; set; }

        /// <summary>
        /// Total gift-wrapping charges in the payment.
        /// </summary>
        /// <value>Total gift-wrapping charges in the payment.</value>
        [DataMember(Name="giftWrap", EmitDefaultValue=false)]
        public string GiftWrap { get; set; }

        /// <summary>
        /// Total uncategorized charges in the payment.
        /// </summary>
        /// <value>Total uncategorized charges in the payment.</value>
        [DataMember(Name="misc", EmitDefaultValue=false)]
        public string Misc { get; set; }

        /// <summary>
        /// Promotion codes associated with the payment.
        /// </summary>
        /// <value>Promotion codes associated with the payment.</value>
        [DataMember(Name="promoCode", EmitDefaultValue=false)]
        public string PromoCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VcFinishRequestExampleInnerPaymentRequest {\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Subtotal: ").Append(Subtotal).Append("\n");
            sb.Append("  ShippingHandling: ").Append(ShippingHandling).Append("\n");
            sb.Append("  Tax: ").Append(Tax).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  GiftWrap: ").Append(GiftWrap).Append("\n");
            sb.Append("  Misc: ").Append(Misc).Append("\n");
            sb.Append("  PromoCode: ").Append(PromoCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VcFinishRequestExampleInnerPaymentRequest);
        }

        /// <summary>
        /// Returns true if VcFinishRequestExampleInnerPaymentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of VcFinishRequestExampleInnerPaymentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VcFinishRequestExampleInnerPaymentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrencyCode == input.CurrencyCode ||
                    (this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(input.CurrencyCode))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Subtotal == input.Subtotal ||
                    (this.Subtotal != null &&
                    this.Subtotal.Equals(input.Subtotal))
                ) && 
                (
                    this.ShippingHandling == input.ShippingHandling ||
                    (this.ShippingHandling != null &&
                    this.ShippingHandling.Equals(input.ShippingHandling))
                ) && 
                (
                    this.Tax == input.Tax ||
                    (this.Tax != null &&
                    this.Tax.Equals(input.Tax))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.GiftWrap == input.GiftWrap ||
                    (this.GiftWrap != null &&
                    this.GiftWrap.Equals(input.GiftWrap))
                ) && 
                (
                    this.Misc == input.Misc ||
                    (this.Misc != null &&
                    this.Misc.Equals(input.Misc))
                ) && 
                (
                    this.PromoCode == input.PromoCode ||
                    (this.PromoCode != null &&
                    this.PromoCode.Equals(input.PromoCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrencyCode != null)
                    hashCode = hashCode * 59 + this.CurrencyCode.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Subtotal != null)
                    hashCode = hashCode * 59 + this.Subtotal.GetHashCode();
                if (this.ShippingHandling != null)
                    hashCode = hashCode * 59 + this.ShippingHandling.GetHashCode();
                if (this.Tax != null)
                    hashCode = hashCode * 59 + this.Tax.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.GiftWrap != null)
                    hashCode = hashCode * 59 + this.GiftWrap.GetHashCode();
                if (this.Misc != null)
                    hashCode = hashCode * 59 + this.Misc.GetHashCode();
                if (this.PromoCode != null)
                    hashCode = hashCode * 59 + this.PromoCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

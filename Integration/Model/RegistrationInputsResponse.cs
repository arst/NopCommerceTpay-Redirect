/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RegistrationInputsResponse
    /// </summary>
    [DataContract]
    public partial class RegistrationInputsResponse :  IEquatable<RegistrationInputsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationInputsResponse" /> class.
        /// </summary>
        /// <param name="Result">Result.</param>
        /// <param name="LegalForms">LegalForms.</param>
        /// <param name="Branches">Branches.</param>
        /// <param name="Err">Err.</param>
        public RegistrationInputsResponse(Result Result = default(Result), List<LegalFormObject> LegalForms = default(List<LegalFormObject>), List<BranchObject> Branches = default(List<BranchObject>), RegistrationErrCodes Err = default(RegistrationErrCodes))
        {
            this.Result = Result;
            this.LegalForms = LegalForms;
            this.Branches = Branches;
            this.Err = Err;
        }
        
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public Result Result { get; set; }

        /// <summary>
        /// Gets or Sets LegalForms
        /// </summary>
        [DataMember(Name="legalForms", EmitDefaultValue=false)]
        public List<LegalFormObject> LegalForms { get; set; }

        /// <summary>
        /// Gets or Sets Branches
        /// </summary>
        [DataMember(Name="branches", EmitDefaultValue=false)]
        public List<BranchObject> Branches { get; set; }

        /// <summary>
        /// Gets or Sets Err
        /// </summary>
        [DataMember(Name="err", EmitDefaultValue=false)]
        public RegistrationErrCodes Err { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistrationInputsResponse {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  LegalForms: ").Append(LegalForms).Append("\n");
            sb.Append("  Branches: ").Append(Branches).Append("\n");
            sb.Append("  Err: ").Append(Err).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegistrationInputsResponse);
        }

        /// <summary>
        /// Returns true if RegistrationInputsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RegistrationInputsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationInputsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.LegalForms == input.LegalForms ||
                    this.LegalForms != null &&
                    this.LegalForms.SequenceEqual(input.LegalForms)
                ) && 
                (
                    this.Branches == input.Branches ||
                    this.Branches != null &&
                    this.Branches.SequenceEqual(input.Branches)
                ) && 
                (
                    this.Err == input.Err ||
                    (this.Err != null &&
                    this.Err.Equals(input.Err))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.LegalForms != null)
                    hashCode = hashCode * 59 + this.LegalForms.GetHashCode();
                if (this.Branches != null)
                    hashCode = hashCode * 59 + this.Branches.GetHashCode();
                if (this.Err != null)
                    hashCode = hashCode * 59 + this.Err.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

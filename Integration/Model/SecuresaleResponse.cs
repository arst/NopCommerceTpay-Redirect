/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SecuresaleResponse
    /// </summary>
    [DataContract]
    public partial class SecuresaleResponse :  IEquatable<SecuresaleResponse>, IValidatableObject
    {
        /// <summary>
        /// Defines Status
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Correct for value: correct
            /// </summary>
            [EnumMember(Value = "correct")]
            Correct = 1,
            
            /// <summary>
            /// Enum Declined for value: declined
            /// </summary>
            [EnumMember(Value = "declined")]
            Declined = 2
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Defines Reason
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ReasonEnum
        {
            
            /// <summary>
            /// Enum _00ResponseblockonAcquirerElavoneServicelevelunexpectederror for value: 00 Response block on Acquirer (Elavon / eService) level (unexpected error)
            /// </summary>
            [EnumMember(Value = "00 Response block on Acquirer (Elavon / eService) level (unexpected error)")]
            _00ResponseblockonAcquirerElavoneServicelevelunexpectederror = 1,
            
            /// <summary>
            /// Enum _01Vocalauthorizationrequired for value: 01 Vocal authorization required
            /// </summary>
            [EnumMember(Value = "01 Vocal authorization required")]
            _01Vocalauthorizationrequired = 2,
            
            /// <summary>
            /// Enum _02Vocalauthorizationrequired for value: 02 Vocal authorization required
            /// </summary>
            [EnumMember(Value = "02 Vocal authorization required")]
            _02Vocalauthorizationrequired = 3,
            
            /// <summary>
            /// Enum _03InvalidInsufficientcarddata for value: 03 Invalid/insufficient card data
            /// </summary>
            [EnumMember(Value = "03 Invalid/insufficient card data")]
            _03InvalidInsufficientcarddata = 4
        }

        /// <summary>
        /// Gets or Sets Reason
        /// </summary>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public ReasonEnum? Reason { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SecuresaleResponse" /> class.
        /// </summary>
        /// <param name="_3dsUrl">_3dsUrl.</param>
        /// <param name="Result">Result.</param>
        /// <param name="TestMode">TestMode.</param>
        /// <param name="SaleAuth">SaleAuth.</param>
        /// <param name="CliAuth">CliAuth.</param>
        /// <param name="Currency">Currency.</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="Date">Date.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Reason">Reason.</param>
        /// <param name="Card">Card number last 4 digits - for example ****1234.</param>
        /// <param name="Sign">sign is calculated from cryptographic hash function set in Merchant panel (default SHA-1) hash_alg(test_mode + sale_auth + cli_auth + card + currency + amount + date + status + verification code) .</param>
        /// <param name="ErrCode">ErrCode.</param>
        /// <param name="ErrDesc">ErrDesc.</param>
        public SecuresaleResponse(string _3dsUrl = default(string), Result Result = default(Result), int? TestMode = default(int?), SaleAuth SaleAuth = default(SaleAuth), CliAuth CliAuth = default(CliAuth), Currency Currency = default(Currency), Amount Amount = default(Amount), DateTime? Date = default(DateTime?), StatusEnum? Status = default(StatusEnum?), ReasonEnum? Reason = default(ReasonEnum?), string Card = default(string), string Sign = default(string), CardsErrCode ErrCode = default(CardsErrCode), CardsErrDesc ErrDesc = default(CardsErrDesc))
        {
            this._3dsUrl = _3dsUrl;
            this.Result = Result;
            this.TestMode = TestMode;
            this.SaleAuth = SaleAuth;
            this.CliAuth = CliAuth;
            this.Currency = Currency;
            this.Amount = Amount;
            this.Date = Date;
            this.Status = Status;
            this.Reason = Reason;
            this.Card = Card;
            this.Sign = Sign;
            this.ErrCode = ErrCode;
            this.ErrDesc = ErrDesc;
        }
        
        /// <summary>
        /// Gets or Sets _3dsUrl
        /// </summary>
        [DataMember(Name="3ds_url", EmitDefaultValue=false)]
        public string _3dsUrl { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public Result Result { get; set; }

        /// <summary>
        /// Gets or Sets TestMode
        /// </summary>
        [DataMember(Name="test_mode", EmitDefaultValue=false)]
        public int? TestMode { get; set; }

        /// <summary>
        /// Gets or Sets SaleAuth
        /// </summary>
        [DataMember(Name="sale_auth", EmitDefaultValue=false)]
        public SaleAuth SaleAuth { get; set; }

        /// <summary>
        /// Gets or Sets CliAuth
        /// </summary>
        [DataMember(Name="cli_auth", EmitDefaultValue=false)]
        public CliAuth CliAuth { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public Currency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }



        /// <summary>
        /// Card number last 4 digits - for example ****1234
        /// </summary>
        /// <value>Card number last 4 digits - for example ****1234</value>
        [DataMember(Name="card", EmitDefaultValue=false)]
        public string Card { get; set; }

        /// <summary>
        /// sign is calculated from cryptographic hash function set in Merchant panel (default SHA-1) hash_alg(test_mode + sale_auth + cli_auth + card + currency + amount + date + status + verification code) 
        /// </summary>
        /// <value>sign is calculated from cryptographic hash function set in Merchant panel (default SHA-1) hash_alg(test_mode + sale_auth + cli_auth + card + currency + amount + date + status + verification code) </value>
        [DataMember(Name="sign", EmitDefaultValue=false)]
        public string Sign { get; set; }

        /// <summary>
        /// Gets or Sets ErrCode
        /// </summary>
        [DataMember(Name="err_code", EmitDefaultValue=false)]
        public CardsErrCode ErrCode { get; set; }

        /// <summary>
        /// Gets or Sets ErrDesc
        /// </summary>
        [DataMember(Name="err_desc", EmitDefaultValue=false)]
        public CardsErrDesc ErrDesc { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SecuresaleResponse {\n");
            sb.Append("  _3dsUrl: ").Append(_3dsUrl).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  TestMode: ").Append(TestMode).Append("\n");
            sb.Append("  SaleAuth: ").Append(SaleAuth).Append("\n");
            sb.Append("  CliAuth: ").Append(CliAuth).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Card: ").Append(Card).Append("\n");
            sb.Append("  Sign: ").Append(Sign).Append("\n");
            sb.Append("  ErrCode: ").Append(ErrCode).Append("\n");
            sb.Append("  ErrDesc: ").Append(ErrDesc).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SecuresaleResponse);
        }

        /// <summary>
        /// Returns true if SecuresaleResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SecuresaleResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SecuresaleResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._3dsUrl == input._3dsUrl ||
                    (this._3dsUrl != null &&
                    this._3dsUrl.Equals(input._3dsUrl))
                ) && 
                (
                    this.Result == input.Result ||
                    (this.Result != null &&
                    this.Result.Equals(input.Result))
                ) && 
                (
                    this.TestMode == input.TestMode ||
                    (this.TestMode != null &&
                    this.TestMode.Equals(input.TestMode))
                ) && 
                (
                    this.SaleAuth == input.SaleAuth ||
                    (this.SaleAuth != null &&
                    this.SaleAuth.Equals(input.SaleAuth))
                ) && 
                (
                    this.CliAuth == input.CliAuth ||
                    (this.CliAuth != null &&
                    this.CliAuth.Equals(input.CliAuth))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Card == input.Card ||
                    (this.Card != null &&
                    this.Card.Equals(input.Card))
                ) && 
                (
                    this.Sign == input.Sign ||
                    (this.Sign != null &&
                    this.Sign.Equals(input.Sign))
                ) && 
                (
                    this.ErrCode == input.ErrCode ||
                    (this.ErrCode != null &&
                    this.ErrCode.Equals(input.ErrCode))
                ) && 
                (
                    this.ErrDesc == input.ErrDesc ||
                    (this.ErrDesc != null &&
                    this.ErrDesc.Equals(input.ErrDesc))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._3dsUrl != null)
                    hashCode = hashCode * 59 + this._3dsUrl.GetHashCode();
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.TestMode != null)
                    hashCode = hashCode * 59 + this.TestMode.GetHashCode();
                if (this.SaleAuth != null)
                    hashCode = hashCode * 59 + this.SaleAuth.GetHashCode();
                if (this.CliAuth != null)
                    hashCode = hashCode * 59 + this.CliAuth.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Reason != null)
                    hashCode = hashCode * 59 + this.Reason.GetHashCode();
                if (this.Card != null)
                    hashCode = hashCode * 59 + this.Card.GetHashCode();
                if (this.Sign != null)
                    hashCode = hashCode * 59 + this.Sign.GetHashCode();
                if (this.ErrCode != null)
                    hashCode = hashCode * 59 + this.ErrCode.GetHashCode();
                if (this.ErrDesc != null)
                    hashCode = hashCode * 59 + this.ErrDesc.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Sign (string) maxLength
            if(this.Sign != null && this.Sign.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sign, length must be less than 128.", new [] { "Sign" });
            }

            // Sign (string) minLength
            if(this.Sign != null && this.Sign.Length < 40)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Sign, length must be greater than 40.", new [] { "Sign" });
            }

            yield break;
        }
    }

}

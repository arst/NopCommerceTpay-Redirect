/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Each transfer object represents one transfer within specific transfers pack.
    /// </summary>
    [DataContract]
    public partial class TransfersObject :  IEquatable<TransfersObject>, IValidatableObject
    {
        /// <summary>
        /// Payment status
        /// </summary>
        /// <value>Payment status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,
            
            /// <summary>
            /// Enum Auth for value: auth
            /// </summary>
            [EnumMember(Value = "auth")]
            Auth = 2,
            
            /// <summary>
            /// Enum Processed for value: processed
            /// </summary>
            [EnumMember(Value = "processed")]
            Processed = 3,
            
            /// <summary>
            /// Enum Done for value: done
            /// </summary>
            [EnumMember(Value = "done")]
            Done = 4
        }

        /// <summary>
        /// Payment status
        /// </summary>
        /// <value>Payment status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TransfersObject" /> class.
        /// </summary>
        /// <param name="Date">Date of creating payment.</param>
        /// <param name="AuthDate">Date of payment authorization (method authorize). Field can be empty..</param>
        /// <param name="AccDate">Date of posting payment.</param>
        /// <param name="Status">Payment status.</param>
        /// <param name="Accnum">Bank account number (format IBAN, 26 digits).</param>
        /// <param name="Rcv1">Receiver name (first part).</param>
        /// <param name="Rcv2">Receiver name (second part).</param>
        /// <param name="Rcv3">Receiver name (third part).</param>
        /// <param name="Rcv4">Receiver name (fourth part).</param>
        /// <param name="Amount">Amount.</param>
        /// <param name="Title1">Payment title (first part).</param>
        /// <param name="Title2">Payment title (second part).</param>
        /// <param name="TrId">Payment ID in tpay.com system.</param>
        public TransfersObject(string Date = default(string), string AuthDate = default(string), string AccDate = default(string), StatusEnum? Status = default(StatusEnum?), string Accnum = default(string), string Rcv1 = default(string), string Rcv2 = default(string), string Rcv3 = default(string), string Rcv4 = default(string), Amount Amount = default(Amount), string Title1 = default(string), string Title2 = default(string), decimal? TrId = default(decimal?))
        {
            this.Date = Date;
            this.AuthDate = AuthDate;
            this.AccDate = AccDate;
            this.Status = Status;
            this.Accnum = Accnum;
            this.Rcv1 = Rcv1;
            this.Rcv2 = Rcv2;
            this.Rcv3 = Rcv3;
            this.Rcv4 = Rcv4;
            this.Amount = Amount;
            this.Title1 = Title1;
            this.Title2 = Title2;
            this.TrId = TrId;
        }
        
        /// <summary>
        /// Date of creating payment
        /// </summary>
        /// <value>Date of creating payment</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Date of payment authorization (method authorize). Field can be empty.
        /// </summary>
        /// <value>Date of payment authorization (method authorize). Field can be empty.</value>
        [DataMember(Name="auth_date", EmitDefaultValue=false)]
        public string AuthDate { get; set; }

        /// <summary>
        /// Date of posting payment
        /// </summary>
        /// <value>Date of posting payment</value>
        [DataMember(Name="acc_date", EmitDefaultValue=false)]
        public string AccDate { get; set; }


        /// <summary>
        /// Bank account number (format IBAN, 26 digits)
        /// </summary>
        /// <value>Bank account number (format IBAN, 26 digits)</value>
        [DataMember(Name="accnum", EmitDefaultValue=false)]
        public string Accnum { get; set; }

        /// <summary>
        /// Receiver name (first part)
        /// </summary>
        /// <value>Receiver name (first part)</value>
        [DataMember(Name="rcv1", EmitDefaultValue=false)]
        public string Rcv1 { get; set; }

        /// <summary>
        /// Receiver name (second part)
        /// </summary>
        /// <value>Receiver name (second part)</value>
        [DataMember(Name="rcv2", EmitDefaultValue=false)]
        public string Rcv2 { get; set; }

        /// <summary>
        /// Receiver name (third part)
        /// </summary>
        /// <value>Receiver name (third part)</value>
        [DataMember(Name="rcv3", EmitDefaultValue=false)]
        public string Rcv3 { get; set; }

        /// <summary>
        /// Receiver name (fourth part)
        /// </summary>
        /// <value>Receiver name (fourth part)</value>
        [DataMember(Name="rcv4", EmitDefaultValue=false)]
        public string Rcv4 { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public Amount Amount { get; set; }

        /// <summary>
        /// Payment title (first part)
        /// </summary>
        /// <value>Payment title (first part)</value>
        [DataMember(Name="title1", EmitDefaultValue=false)]
        public string Title1 { get; set; }

        /// <summary>
        /// Payment title (second part)
        /// </summary>
        /// <value>Payment title (second part)</value>
        [DataMember(Name="title2", EmitDefaultValue=false)]
        public string Title2 { get; set; }

        /// <summary>
        /// Payment ID in tpay.com system
        /// </summary>
        /// <value>Payment ID in tpay.com system</value>
        [DataMember(Name="tr_id", EmitDefaultValue=false)]
        public decimal? TrId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransfersObject {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  AuthDate: ").Append(AuthDate).Append("\n");
            sb.Append("  AccDate: ").Append(AccDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Accnum: ").Append(Accnum).Append("\n");
            sb.Append("  Rcv1: ").Append(Rcv1).Append("\n");
            sb.Append("  Rcv2: ").Append(Rcv2).Append("\n");
            sb.Append("  Rcv3: ").Append(Rcv3).Append("\n");
            sb.Append("  Rcv4: ").Append(Rcv4).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Title1: ").Append(Title1).Append("\n");
            sb.Append("  Title2: ").Append(Title2).Append("\n");
            sb.Append("  TrId: ").Append(TrId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransfersObject);
        }

        /// <summary>
        /// Returns true if TransfersObject instances are equal
        /// </summary>
        /// <param name="input">Instance of TransfersObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransfersObject input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.AuthDate == input.AuthDate ||
                    (this.AuthDate != null &&
                    this.AuthDate.Equals(input.AuthDate))
                ) && 
                (
                    this.AccDate == input.AccDate ||
                    (this.AccDate != null &&
                    this.AccDate.Equals(input.AccDate))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Accnum == input.Accnum ||
                    (this.Accnum != null &&
                    this.Accnum.Equals(input.Accnum))
                ) && 
                (
                    this.Rcv1 == input.Rcv1 ||
                    (this.Rcv1 != null &&
                    this.Rcv1.Equals(input.Rcv1))
                ) && 
                (
                    this.Rcv2 == input.Rcv2 ||
                    (this.Rcv2 != null &&
                    this.Rcv2.Equals(input.Rcv2))
                ) && 
                (
                    this.Rcv3 == input.Rcv3 ||
                    (this.Rcv3 != null &&
                    this.Rcv3.Equals(input.Rcv3))
                ) && 
                (
                    this.Rcv4 == input.Rcv4 ||
                    (this.Rcv4 != null &&
                    this.Rcv4.Equals(input.Rcv4))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Title1 == input.Title1 ||
                    (this.Title1 != null &&
                    this.Title1.Equals(input.Title1))
                ) && 
                (
                    this.Title2 == input.Title2 ||
                    (this.Title2 != null &&
                    this.Title2.Equals(input.Title2))
                ) && 
                (
                    this.TrId == input.TrId ||
                    (this.TrId != null &&
                    this.TrId.Equals(input.TrId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.AuthDate != null)
                    hashCode = hashCode * 59 + this.AuthDate.GetHashCode();
                if (this.AccDate != null)
                    hashCode = hashCode * 59 + this.AccDate.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Accnum != null)
                    hashCode = hashCode * 59 + this.Accnum.GetHashCode();
                if (this.Rcv1 != null)
                    hashCode = hashCode * 59 + this.Rcv1.GetHashCode();
                if (this.Rcv2 != null)
                    hashCode = hashCode * 59 + this.Rcv2.GetHashCode();
                if (this.Rcv3 != null)
                    hashCode = hashCode * 59 + this.Rcv3.GetHashCode();
                if (this.Rcv4 != null)
                    hashCode = hashCode * 59 + this.Rcv4.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Title1 != null)
                    hashCode = hashCode * 59 + this.Title1.GetHashCode();
                if (this.Title2 != null)
                    hashCode = hashCode * 59 + this.Title2.GetHashCode();
                if (this.TrId != null)
                    hashCode = hashCode * 59 + this.TrId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Date (string) pattern
            Regex regexDate = new Regex(@"YYYY-MM-DD HH:mm:ss", RegexOptions.CultureInvariant);
            if (false == regexDate.Match(this.Date).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Date, must match a pattern of " + regexDate, new [] { "Date" });
            }

            // AuthDate (string) pattern
            Regex regexAuthDate = new Regex(@"YYYY-MM-DD HH:mm:ss", RegexOptions.CultureInvariant);
            if (false == regexAuthDate.Match(this.AuthDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AuthDate, must match a pattern of " + regexAuthDate, new [] { "AuthDate" });
            }

            // AccDate (string) pattern
            Regex regexAccDate = new Regex(@"YYYY-MM-DD HH:mm:ss", RegexOptions.CultureInvariant);
            if (false == regexAccDate.Match(this.AccDate).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AccDate, must match a pattern of " + regexAccDate, new [] { "AccDate" });
            }

            // Accnum (string) maxLength
            if(this.Accnum != null && this.Accnum.Length > 26)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Accnum, length must be less than 26.", new [] { "Accnum" });
            }

            // Accnum (string) minLength
            if(this.Accnum != null && this.Accnum.Length < 26)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Accnum, length must be greater than 26.", new [] { "Accnum" });
            }

            yield break;
        }
    }

}

/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// RegisterFields
    /// </summary>
    [DataContract]
    public partial class RegisterFields :  IEquatable<RegisterFields>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterFields" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RegisterFields() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RegisterFields" /> class.
        /// </summary>
        /// <param name="Email">Merchant email. Access data for Tpay.com account will be send on this email after registration. (required).</param>
        /// <param name="Name">Merchant&#39;s company name. (required).</param>
        /// <param name="Nip">Taxpayer identification number. (required).</param>
        /// <param name="Regon">National Business Registry Number..</param>
        /// <param name="Krsedg">Entry number from National Court Register.</param>
        /// <param name="LegalForm">Legal Form Id received from &#39;inputs&#39; method. (required).</param>
        /// <param name="Branche">Branche id received from &#39;inputs&#39; method. (required).</param>
        /// <param name="Website">Merchant&#39;s website.</param>
        /// <param name="Phone">Merchant phone number (required).</param>
        /// <param name="AddressStreet">Merchant&#39;s company street address. (required).</param>
        /// <param name="AddressBlock">Merchant&#39;s company block number. (required).</param>
        /// <param name="AddressNr">Merchant&#39;s company local number. (required).</param>
        /// <param name="AddressCity">Merchant&#39;s company city address. (required).</param>
        /// <param name="AddressCode">Merchant&#39;s company city postal code. (required).</param>
        /// <param name="CreateApi">Generate access for API transaction. Access data (api_key and  api_password) will be returned in response..</param>
        /// <param name="OfferCode">Offer code dedicate for merchant and  generate by Sales Department..</param>
        /// <param name="Test">Parameter allows recieved an example response with merchant data without creating new account in Tpay.com system. Parameter is obligatory in initial stage of integration..</param>
        /// <param name="ApiPassword">ApiPassword (required).</param>
        public RegisterFields(string Email = default(string), string Name = default(string), string Nip = default(string), string Regon = default(string), string Krsedg = default(string), string LegalForm = default(string), int? Branche = default(int?), string Website = default(string), string Phone = default(string), string AddressStreet = default(string), string AddressBlock = default(string), string AddressNr = default(string), string AddressCity = default(string), string AddressCode = default(string), int? CreateApi = default(int?), string OfferCode = default(string), int? Test = default(int?), RegistrationApiPassword ApiPassword = default(RegistrationApiPassword))
        {
            // to ensure "Email" is required (not null)
            if (Email == null)
            {
                throw new InvalidDataException("Email is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.Email = Email;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Nip" is required (not null)
            if (Nip == null)
            {
                throw new InvalidDataException("Nip is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.Nip = Nip;
            }
            // to ensure "LegalForm" is required (not null)
            if (LegalForm == null)
            {
                throw new InvalidDataException("LegalForm is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.LegalForm = LegalForm;
            }
            // to ensure "Branche" is required (not null)
            if (Branche == null)
            {
                throw new InvalidDataException("Branche is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.Branche = Branche;
            }
            // to ensure "Phone" is required (not null)
            if (Phone == null)
            {
                throw new InvalidDataException("Phone is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.Phone = Phone;
            }
            // to ensure "AddressStreet" is required (not null)
            if (AddressStreet == null)
            {
                throw new InvalidDataException("AddressStreet is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.AddressStreet = AddressStreet;
            }
            // to ensure "AddressBlock" is required (not null)
            if (AddressBlock == null)
            {
                throw new InvalidDataException("AddressBlock is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.AddressBlock = AddressBlock;
            }
            // to ensure "AddressNr" is required (not null)
            if (AddressNr == null)
            {
                throw new InvalidDataException("AddressNr is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.AddressNr = AddressNr;
            }
            // to ensure "AddressCity" is required (not null)
            if (AddressCity == null)
            {
                throw new InvalidDataException("AddressCity is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.AddressCity = AddressCity;
            }
            // to ensure "AddressCode" is required (not null)
            if (AddressCode == null)
            {
                throw new InvalidDataException("AddressCode is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.AddressCode = AddressCode;
            }
            // to ensure "ApiPassword" is required (not null)
            if (ApiPassword == null)
            {
                throw new InvalidDataException("ApiPassword is a required property for RegisterFields and cannot be null");
            }
            else
            {
                this.ApiPassword = ApiPassword;
            }
            this.Regon = Regon;
            this.Krsedg = Krsedg;
            this.Website = Website;
            this.CreateApi = CreateApi;
            this.OfferCode = OfferCode;
            this.Test = Test;
        }
        
        /// <summary>
        /// Merchant email. Access data for Tpay.com account will be send on this email after registration.
        /// </summary>
        /// <value>Merchant email. Access data for Tpay.com account will be send on this email after registration.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Merchant&#39;s company name.
        /// </summary>
        /// <value>Merchant&#39;s company name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Taxpayer identification number.
        /// </summary>
        /// <value>Taxpayer identification number.</value>
        [DataMember(Name="nip", EmitDefaultValue=false)]
        public string Nip { get; set; }

        /// <summary>
        /// National Business Registry Number.
        /// </summary>
        /// <value>National Business Registry Number.</value>
        [DataMember(Name="regon", EmitDefaultValue=false)]
        public string Regon { get; set; }

        /// <summary>
        /// Entry number from National Court Register
        /// </summary>
        /// <value>Entry number from National Court Register</value>
        [DataMember(Name="krsedg", EmitDefaultValue=false)]
        public string Krsedg { get; set; }

        /// <summary>
        /// Legal Form Id received from &#39;inputs&#39; method.
        /// </summary>
        /// <value>Legal Form Id received from &#39;inputs&#39; method.</value>
        [DataMember(Name="legalForm", EmitDefaultValue=false)]
        public string LegalForm { get; set; }

        /// <summary>
        /// Branche id received from &#39;inputs&#39; method.
        /// </summary>
        /// <value>Branche id received from &#39;inputs&#39; method.</value>
        [DataMember(Name="branche", EmitDefaultValue=false)]
        public int? Branche { get; set; }

        /// <summary>
        /// Merchant&#39;s website
        /// </summary>
        /// <value>Merchant&#39;s website</value>
        [DataMember(Name="website", EmitDefaultValue=false)]
        public string Website { get; set; }

        /// <summary>
        /// Merchant phone number
        /// </summary>
        /// <value>Merchant phone number</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// Merchant&#39;s company street address.
        /// </summary>
        /// <value>Merchant&#39;s company street address.</value>
        [DataMember(Name="addressStreet", EmitDefaultValue=false)]
        public string AddressStreet { get; set; }

        /// <summary>
        /// Merchant&#39;s company block number.
        /// </summary>
        /// <value>Merchant&#39;s company block number.</value>
        [DataMember(Name="addressBlock", EmitDefaultValue=false)]
        public string AddressBlock { get; set; }

        /// <summary>
        /// Merchant&#39;s company local number.
        /// </summary>
        /// <value>Merchant&#39;s company local number.</value>
        [DataMember(Name="addressNr", EmitDefaultValue=false)]
        public string AddressNr { get; set; }

        /// <summary>
        /// Merchant&#39;s company city address.
        /// </summary>
        /// <value>Merchant&#39;s company city address.</value>
        [DataMember(Name="addressCity", EmitDefaultValue=false)]
        public string AddressCity { get; set; }

        /// <summary>
        /// Merchant&#39;s company city postal code.
        /// </summary>
        /// <value>Merchant&#39;s company city postal code.</value>
        [DataMember(Name="addressCode", EmitDefaultValue=false)]
        public string AddressCode { get; set; }

        /// <summary>
        /// Generate access for API transaction. Access data (api_key and  api_password) will be returned in response.
        /// </summary>
        /// <value>Generate access for API transaction. Access data (api_key and  api_password) will be returned in response.</value>
        [DataMember(Name="createApi", EmitDefaultValue=false)]
        public int? CreateApi { get; set; }

        /// <summary>
        /// Offer code dedicate for merchant and  generate by Sales Department.
        /// </summary>
        /// <value>Offer code dedicate for merchant and  generate by Sales Department.</value>
        [DataMember(Name="offerCode", EmitDefaultValue=false)]
        public string OfferCode { get; set; }

        /// <summary>
        /// Parameter allows recieved an example response with merchant data without creating new account in Tpay.com system. Parameter is obligatory in initial stage of integration.
        /// </summary>
        /// <value>Parameter allows recieved an example response with merchant data without creating new account in Tpay.com system. Parameter is obligatory in initial stage of integration.</value>
        [DataMember(Name="test", EmitDefaultValue=false)]
        public int? Test { get; set; }

        /// <summary>
        /// Gets or Sets ApiPassword
        /// </summary>
        [DataMember(Name="api_password", EmitDefaultValue=false)]
        public RegistrationApiPassword ApiPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegisterFields {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nip: ").Append(Nip).Append("\n");
            sb.Append("  Regon: ").Append(Regon).Append("\n");
            sb.Append("  Krsedg: ").Append(Krsedg).Append("\n");
            sb.Append("  LegalForm: ").Append(LegalForm).Append("\n");
            sb.Append("  Branche: ").Append(Branche).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  AddressStreet: ").Append(AddressStreet).Append("\n");
            sb.Append("  AddressBlock: ").Append(AddressBlock).Append("\n");
            sb.Append("  AddressNr: ").Append(AddressNr).Append("\n");
            sb.Append("  AddressCity: ").Append(AddressCity).Append("\n");
            sb.Append("  AddressCode: ").Append(AddressCode).Append("\n");
            sb.Append("  CreateApi: ").Append(CreateApi).Append("\n");
            sb.Append("  OfferCode: ").Append(OfferCode).Append("\n");
            sb.Append("  Test: ").Append(Test).Append("\n");
            sb.Append("  ApiPassword: ").Append(ApiPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegisterFields);
        }

        /// <summary>
        /// Returns true if RegisterFields instances are equal
        /// </summary>
        /// <param name="input">Instance of RegisterFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegisterFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Nip == input.Nip ||
                    (this.Nip != null &&
                    this.Nip.Equals(input.Nip))
                ) && 
                (
                    this.Regon == input.Regon ||
                    (this.Regon != null &&
                    this.Regon.Equals(input.Regon))
                ) && 
                (
                    this.Krsedg == input.Krsedg ||
                    (this.Krsedg != null &&
                    this.Krsedg.Equals(input.Krsedg))
                ) && 
                (
                    this.LegalForm == input.LegalForm ||
                    (this.LegalForm != null &&
                    this.LegalForm.Equals(input.LegalForm))
                ) && 
                (
                    this.Branche == input.Branche ||
                    (this.Branche != null &&
                    this.Branche.Equals(input.Branche))
                ) && 
                (
                    this.Website == input.Website ||
                    (this.Website != null &&
                    this.Website.Equals(input.Website))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.AddressStreet == input.AddressStreet ||
                    (this.AddressStreet != null &&
                    this.AddressStreet.Equals(input.AddressStreet))
                ) && 
                (
                    this.AddressBlock == input.AddressBlock ||
                    (this.AddressBlock != null &&
                    this.AddressBlock.Equals(input.AddressBlock))
                ) && 
                (
                    this.AddressNr == input.AddressNr ||
                    (this.AddressNr != null &&
                    this.AddressNr.Equals(input.AddressNr))
                ) && 
                (
                    this.AddressCity == input.AddressCity ||
                    (this.AddressCity != null &&
                    this.AddressCity.Equals(input.AddressCity))
                ) && 
                (
                    this.AddressCode == input.AddressCode ||
                    (this.AddressCode != null &&
                    this.AddressCode.Equals(input.AddressCode))
                ) && 
                (
                    this.CreateApi == input.CreateApi ||
                    (this.CreateApi != null &&
                    this.CreateApi.Equals(input.CreateApi))
                ) && 
                (
                    this.OfferCode == input.OfferCode ||
                    (this.OfferCode != null &&
                    this.OfferCode.Equals(input.OfferCode))
                ) && 
                (
                    this.Test == input.Test ||
                    (this.Test != null &&
                    this.Test.Equals(input.Test))
                ) && 
                (
                    this.ApiPassword == input.ApiPassword ||
                    (this.ApiPassword != null &&
                    this.ApiPassword.Equals(input.ApiPassword))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Nip != null)
                    hashCode = hashCode * 59 + this.Nip.GetHashCode();
                if (this.Regon != null)
                    hashCode = hashCode * 59 + this.Regon.GetHashCode();
                if (this.Krsedg != null)
                    hashCode = hashCode * 59 + this.Krsedg.GetHashCode();
                if (this.LegalForm != null)
                    hashCode = hashCode * 59 + this.LegalForm.GetHashCode();
                if (this.Branche != null)
                    hashCode = hashCode * 59 + this.Branche.GetHashCode();
                if (this.Website != null)
                    hashCode = hashCode * 59 + this.Website.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.AddressStreet != null)
                    hashCode = hashCode * 59 + this.AddressStreet.GetHashCode();
                if (this.AddressBlock != null)
                    hashCode = hashCode * 59 + this.AddressBlock.GetHashCode();
                if (this.AddressNr != null)
                    hashCode = hashCode * 59 + this.AddressNr.GetHashCode();
                if (this.AddressCity != null)
                    hashCode = hashCode * 59 + this.AddressCity.GetHashCode();
                if (this.AddressCode != null)
                    hashCode = hashCode * 59 + this.AddressCode.GetHashCode();
                if (this.CreateApi != null)
                    hashCode = hashCode * 59 + this.CreateApi.GetHashCode();
                if (this.OfferCode != null)
                    hashCode = hashCode * 59 + this.OfferCode.GetHashCode();
                if (this.Test != null)
                    hashCode = hashCode * 59 + this.Test.GetHashCode();
                if (this.ApiPassword != null)
                    hashCode = hashCode * 59 + this.ApiPassword.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (string) maxLength
            if(this.Email != null && this.Email.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 64.", new [] { "Email" });
            }

            // Name (string) maxLength
            if(this.Name != null && this.Name.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 128.", new [] { "Name" });
            }

            // Nip (string) maxLength
            if(this.Nip != null && this.Nip.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Nip, length must be less than 16.", new [] { "Nip" });
            }

            // Regon (string) maxLength
            if(this.Regon != null && this.Regon.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Regon, length must be less than 14.", new [] { "Regon" });
            }

            // Regon (string) minLength
            if(this.Regon != null && this.Regon.Length < 9)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Regon, length must be greater than 9.", new [] { "Regon" });
            }

            // Krsedg (string) maxLength
            if(this.Krsedg != null && this.Krsedg.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Krsedg, length must be less than 32.", new [] { "Krsedg" });
            }

            // LegalForm (string) maxLength
            if(this.LegalForm != null && this.LegalForm.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LegalForm, length must be less than 5.", new [] { "LegalForm" });
            }

            // Website (string) maxLength
            if(this.Website != null && this.Website.Length > 120)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Website, length must be less than 120.", new [] { "Website" });
            }

            // Phone (string) maxLength
            if(this.Phone != null && this.Phone.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 16.", new [] { "Phone" });
            }

            // AddressStreet (string) maxLength
            if(this.AddressStreet != null && this.AddressStreet.Length > 128)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressStreet, length must be less than 128.", new [] { "AddressStreet" });
            }

            // AddressBlock (string) maxLength
            if(this.AddressBlock != null && this.AddressBlock.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressBlock, length must be less than 10.", new [] { "AddressBlock" });
            }

            // AddressNr (string) maxLength
            if(this.AddressNr != null && this.AddressNr.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressNr, length must be less than 10.", new [] { "AddressNr" });
            }

            // AddressCity (string) maxLength
            if(this.AddressCity != null && this.AddressCity.Length > 64)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressCity, length must be less than 64.", new [] { "AddressCity" });
            }

            // AddressCode (string) maxLength
            if(this.AddressCode != null && this.AddressCode.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressCode, length must be less than 10.", new [] { "AddressCode" });
            }

            // OfferCode (string) maxLength
            if(this.OfferCode != null && this.OfferCode.Length > 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OfferCode, length must be less than 5.", new [] { "OfferCode" });
            }

            yield break;
        }
    }

}

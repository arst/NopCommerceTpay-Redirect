/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITransactionAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// any
        /// </summary>
        /// <remarks>
        /// The method used to refund part of the transaction amount. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundAnyData">Request body. (optional)</param>
        /// <returns>RefundAnyResponse</returns>
        RefundAnyResponse ApiGwApiKeyChargebackAnyPost (string apiKey, RefundAnyFields refundAnyData = null);

        /// <summary>
        /// any
        /// </summary>
        /// <remarks>
        /// The method used to refund part of the transaction amount. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundAnyData">Request body. (optional)</param>
        /// <returns>ApiResponse of RefundAnyResponse</returns>
        ApiResponse<RefundAnyResponse> ApiGwApiKeyChargebackAnyPostWithHttpInfo (string apiKey, RefundAnyFields refundAnyData = null);
        /// <summary>
        /// transaction
        /// </summary>
        /// <remarks>
        /// The method used to refund full transaction amount. You can get transaction title from &#39;create&#39; method when generating the transaction.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundTransactionData">Request body. (optional)</param>
        /// <returns>RefundAnyResponse</returns>
        RefundAnyResponse ApiGwApiKeyChargebackTransactionPost (string apiKey, RefundTransactionFields refundTransactionData = null);

        /// <summary>
        /// transaction
        /// </summary>
        /// <remarks>
        /// The method used to refund full transaction amount. You can get transaction title from &#39;create&#39; method when generating the transaction.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundTransactionData">Request body. (optional)</param>
        /// <returns>ApiResponse of RefundAnyResponse</returns>
        ApiResponse<RefundAnyResponse> ApiGwApiKeyChargebackTransactionPostWithHttpInfo (string apiKey, RefundTransactionFields refundTransactionData = null);
        /// <summary>
        /// blik
        /// </summary>
        /// <remarks>
        /// This method allows sending a BLIK code in direct communication between merchant and BLIK system. In ‘create’ method you should set 150 as a value for parameter ‘group’, this is a BLIK payment channel. Method returns parameter ‘result’ equal to 1 which means that payment popup has been successfully displayed at customer mobile application. After accepting payment by the customer, tpay.com system sends a standard notification to merchant&#39;s endpoint declared in wyn_url parameter (this parameter should be sent in &#39;create&#39; method.)&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; to test this method, you need to create the transaction with &#39;create&#39; method and replace title parameter value with the returned title.&lt;br/&gt;Blik method works with the specific set of parameters depending on payment type case. Please see BLIK workflow section.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="blikData">Request body. (optional)</param>
        /// <returns>BlikResponse</returns>
        BlikResponse ApiGwApiKeyTransactionBlikPost (string apiKey, BlikFields blikData = null);

        /// <summary>
        /// blik
        /// </summary>
        /// <remarks>
        /// This method allows sending a BLIK code in direct communication between merchant and BLIK system. In ‘create’ method you should set 150 as a value for parameter ‘group’, this is a BLIK payment channel. Method returns parameter ‘result’ equal to 1 which means that payment popup has been successfully displayed at customer mobile application. After accepting payment by the customer, tpay.com system sends a standard notification to merchant&#39;s endpoint declared in wyn_url parameter (this parameter should be sent in &#39;create&#39; method.)&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; to test this method, you need to create the transaction with &#39;create&#39; method and replace title parameter value with the returned title.&lt;br/&gt;Blik method works with the specific set of parameters depending on payment type case. Please see BLIK workflow section.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="blikData">Request body. (optional)</param>
        /// <returns>ApiResponse of BlikResponse</returns>
        ApiResponse<BlikResponse> ApiGwApiKeyTransactionBlikPostWithHttpInfo (string apiKey, BlikFields blikData = null);
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// This method allows you to prepare transaction for a customer. The method returns transaction title required for other API methods and redirection link for a customer.&lt;br/&gt;This method also returns account details for manual money transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>CreateResponse</returns>
        CreateResponse ApiGwApiKeyTransactionCreatePost (string apiKey, CreateFields basicData = null);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// This method allows you to prepare transaction for a customer. The method returns transaction title required for other API methods and redirection link for a customer.&lt;br/&gt;This method also returns account details for manual money transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        ApiResponse<CreateResponse> ApiGwApiKeyTransactionCreatePostWithHttpInfo (string apiKey, CreateFields basicData = null);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// This method allows you to get all information about the transaction by sending previously generated title.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="getData">Request body. (optional)</param>
        /// <returns>GetResponse</returns>
        GetResponse ApiGwApiKeyTransactionGetPost (string apiKey, GetFields getData = null);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// This method allows you to get all information about the transaction by sending previously generated title.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="getData">Request body. (optional)</param>
        /// <returns>ApiResponse of GetResponse</returns>
        ApiResponse<GetResponse> ApiGwApiKeyTransactionGetPostWithHttpInfo (string apiKey, GetFields getData = null);
        /// <summary>
        /// report
        /// </summary>
        /// <remarks>
        /// This method returns payments report for the declared time range, generated in CSV format (semicolon separators) and encoded in base64 - the same format as in merchant panel. If you like to arrange result as an associative array, you can use the ready &lt;a href&#x3D;\&quot;https://github.com/tpay-com/tpay-php/blob/master/tpayLibs/examples/TransactionReportsApi.php\&quot; target&#x3D;\&quot;_blank\&quot;&gt;script&lt;/a&gt; from Tpay PHP library.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="reportData">Request body. (optional)</param>
        /// <returns>ReportResponse</returns>
        ReportResponse ApiGwApiKeyTransactionReportPost (string apiKey, ReportFields reportData = null);

        /// <summary>
        /// report
        /// </summary>
        /// <remarks>
        /// This method returns payments report for the declared time range, generated in CSV format (semicolon separators) and encoded in base64 - the same format as in merchant panel. If you like to arrange result as an associative array, you can use the ready &lt;a href&#x3D;\&quot;https://github.com/tpay-com/tpay-php/blob/master/tpayLibs/examples/TransactionReportsApi.php\&quot; target&#x3D;\&quot;_blank\&quot;&gt;script&lt;/a&gt; from Tpay PHP library.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="reportData">Request body. (optional)</param>
        /// <returns>ApiResponse of ReportResponse</returns>
        ApiResponse<ReportResponse> ApiGwApiKeyTransactionReportPostWithHttpInfo (string apiKey, ReportFields reportData = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// any
        /// </summary>
        /// <remarks>
        /// The method used to refund part of the transaction amount. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundAnyData">Request body. (optional)</param>
        /// <returns>Task of RefundAnyResponse</returns>
        System.Threading.Tasks.Task<RefundAnyResponse> ApiGwApiKeyChargebackAnyPostAsync (string apiKey, RefundAnyFields refundAnyData = null);

        /// <summary>
        /// any
        /// </summary>
        /// <remarks>
        /// The method used to refund part of the transaction amount. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundAnyData">Request body. (optional)</param>
        /// <returns>Task of ApiResponse (RefundAnyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefundAnyResponse>> ApiGwApiKeyChargebackAnyPostAsyncWithHttpInfo (string apiKey, RefundAnyFields refundAnyData = null);
        /// <summary>
        /// transaction
        /// </summary>
        /// <remarks>
        /// The method used to refund full transaction amount. You can get transaction title from &#39;create&#39; method when generating the transaction.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundTransactionData">Request body. (optional)</param>
        /// <returns>Task of RefundAnyResponse</returns>
        System.Threading.Tasks.Task<RefundAnyResponse> ApiGwApiKeyChargebackTransactionPostAsync (string apiKey, RefundTransactionFields refundTransactionData = null);

        /// <summary>
        /// transaction
        /// </summary>
        /// <remarks>
        /// The method used to refund full transaction amount. You can get transaction title from &#39;create&#39; method when generating the transaction.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundTransactionData">Request body. (optional)</param>
        /// <returns>Task of ApiResponse (RefundAnyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefundAnyResponse>> ApiGwApiKeyChargebackTransactionPostAsyncWithHttpInfo (string apiKey, RefundTransactionFields refundTransactionData = null);
        /// <summary>
        /// blik
        /// </summary>
        /// <remarks>
        /// This method allows sending a BLIK code in direct communication between merchant and BLIK system. In ‘create’ method you should set 150 as a value for parameter ‘group’, this is a BLIK payment channel. Method returns parameter ‘result’ equal to 1 which means that payment popup has been successfully displayed at customer mobile application. After accepting payment by the customer, tpay.com system sends a standard notification to merchant&#39;s endpoint declared in wyn_url parameter (this parameter should be sent in &#39;create&#39; method.)&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; to test this method, you need to create the transaction with &#39;create&#39; method and replace title parameter value with the returned title.&lt;br/&gt;Blik method works with the specific set of parameters depending on payment type case. Please see BLIK workflow section.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="blikData">Request body. (optional)</param>
        /// <returns>Task of BlikResponse</returns>
        System.Threading.Tasks.Task<BlikResponse> ApiGwApiKeyTransactionBlikPostAsync (string apiKey, BlikFields blikData = null);

        /// <summary>
        /// blik
        /// </summary>
        /// <remarks>
        /// This method allows sending a BLIK code in direct communication between merchant and BLIK system. In ‘create’ method you should set 150 as a value for parameter ‘group’, this is a BLIK payment channel. Method returns parameter ‘result’ equal to 1 which means that payment popup has been successfully displayed at customer mobile application. After accepting payment by the customer, tpay.com system sends a standard notification to merchant&#39;s endpoint declared in wyn_url parameter (this parameter should be sent in &#39;create&#39; method.)&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; to test this method, you need to create the transaction with &#39;create&#39; method and replace title parameter value with the returned title.&lt;br/&gt;Blik method works with the specific set of parameters depending on payment type case. Please see BLIK workflow section.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="blikData">Request body. (optional)</param>
        /// <returns>Task of ApiResponse (BlikResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BlikResponse>> ApiGwApiKeyTransactionBlikPostAsyncWithHttpInfo (string apiKey, BlikFields blikData = null);
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// This method allows you to prepare transaction for a customer. The method returns transaction title required for other API methods and redirection link for a customer.&lt;br/&gt;This method also returns account details for manual money transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of CreateResponse</returns>
        System.Threading.Tasks.Task<CreateResponse> ApiGwApiKeyTransactionCreatePostAsync (string apiKey, CreateFields basicData = null);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// This method allows you to prepare transaction for a customer. The method returns transaction title required for other API methods and redirection link for a customer.&lt;br/&gt;This method also returns account details for manual money transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateResponse>> ApiGwApiKeyTransactionCreatePostAsyncWithHttpInfo (string apiKey, CreateFields basicData = null);
        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// This method allows you to get all information about the transaction by sending previously generated title.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="getData">Request body. (optional)</param>
        /// <returns>Task of GetResponse</returns>
        System.Threading.Tasks.Task<GetResponse> ApiGwApiKeyTransactionGetPostAsync (string apiKey, GetFields getData = null);

        /// <summary>
        /// get
        /// </summary>
        /// <remarks>
        /// This method allows you to get all information about the transaction by sending previously generated title.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="getData">Request body. (optional)</param>
        /// <returns>Task of ApiResponse (GetResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetResponse>> ApiGwApiKeyTransactionGetPostAsyncWithHttpInfo (string apiKey, GetFields getData = null);
        /// <summary>
        /// report
        /// </summary>
        /// <remarks>
        /// This method returns payments report for the declared time range, generated in CSV format (semicolon separators) and encoded in base64 - the same format as in merchant panel. If you like to arrange result as an associative array, you can use the ready &lt;a href&#x3D;\&quot;https://github.com/tpay-com/tpay-php/blob/master/tpayLibs/examples/TransactionReportsApi.php\&quot; target&#x3D;\&quot;_blank\&quot;&gt;script&lt;/a&gt; from Tpay PHP library.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="reportData">Request body. (optional)</param>
        /// <returns>Task of ReportResponse</returns>
        System.Threading.Tasks.Task<ReportResponse> ApiGwApiKeyTransactionReportPostAsync (string apiKey, ReportFields reportData = null);

        /// <summary>
        /// report
        /// </summary>
        /// <remarks>
        /// This method returns payments report for the declared time range, generated in CSV format (semicolon separators) and encoded in base64 - the same format as in merchant panel. If you like to arrange result as an associative array, you can use the ready &lt;a href&#x3D;\&quot;https://github.com/tpay-com/tpay-php/blob/master/tpayLibs/examples/TransactionReportsApi.php\&quot; target&#x3D;\&quot;_blank\&quot;&gt;script&lt;/a&gt; from Tpay PHP library.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="reportData">Request body. (optional)</param>
        /// <returns>Task of ApiResponse (ReportResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReportResponse>> ApiGwApiKeyTransactionReportPostAsyncWithHttpInfo (string apiKey, ReportFields reportData = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TransactionAPIApi : ITransactionAPIApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TransactionAPIApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TransactionAPIApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// any The method used to refund part of the transaction amount. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundAnyData">Request body. (optional)</param>
        /// <returns>RefundAnyResponse</returns>
        public RefundAnyResponse ApiGwApiKeyChargebackAnyPost (string apiKey, RefundAnyFields refundAnyData = null)
        {
             ApiResponse<RefundAnyResponse> localVarResponse = ApiGwApiKeyChargebackAnyPostWithHttpInfo(apiKey, refundAnyData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// any The method used to refund part of the transaction amount. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundAnyData">Request body. (optional)</param>
        /// <returns>ApiResponse of RefundAnyResponse</returns>
        public ApiResponse< RefundAnyResponse > ApiGwApiKeyChargebackAnyPostWithHttpInfo (string apiKey, RefundAnyFields refundAnyData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyChargebackAnyPost");

            var localVarPath = "/api/gw/{api_key}/chargeback/any";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (refundAnyData != null && refundAnyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(refundAnyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = refundAnyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyChargebackAnyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefundAnyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RefundAnyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefundAnyResponse)));
        }

        /// <summary>
        /// any The method used to refund part of the transaction amount. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundAnyData">Request body. (optional)</param>
        /// <returns>Task of RefundAnyResponse</returns>
        public async System.Threading.Tasks.Task<RefundAnyResponse> ApiGwApiKeyChargebackAnyPostAsync (string apiKey, RefundAnyFields refundAnyData = null)
        {
             ApiResponse<RefundAnyResponse> localVarResponse = await ApiGwApiKeyChargebackAnyPostAsyncWithHttpInfo(apiKey, refundAnyData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// any The method used to refund part of the transaction amount. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundAnyData">Request body. (optional)</param>
        /// <returns>Task of ApiResponse (RefundAnyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RefundAnyResponse>> ApiGwApiKeyChargebackAnyPostAsyncWithHttpInfo (string apiKey, RefundAnyFields refundAnyData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyChargebackAnyPost");

            var localVarPath = "/api/gw/{api_key}/chargeback/any";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (refundAnyData != null && refundAnyData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(refundAnyData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = refundAnyData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyChargebackAnyPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefundAnyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RefundAnyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefundAnyResponse)));
        }

        /// <summary>
        /// transaction The method used to refund full transaction amount. You can get transaction title from &#39;create&#39; method when generating the transaction.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundTransactionData">Request body. (optional)</param>
        /// <returns>RefundAnyResponse</returns>
        public RefundAnyResponse ApiGwApiKeyChargebackTransactionPost (string apiKey, RefundTransactionFields refundTransactionData = null)
        {
             ApiResponse<RefundAnyResponse> localVarResponse = ApiGwApiKeyChargebackTransactionPostWithHttpInfo(apiKey, refundTransactionData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// transaction The method used to refund full transaction amount. You can get transaction title from &#39;create&#39; method when generating the transaction.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundTransactionData">Request body. (optional)</param>
        /// <returns>ApiResponse of RefundAnyResponse</returns>
        public ApiResponse< RefundAnyResponse > ApiGwApiKeyChargebackTransactionPostWithHttpInfo (string apiKey, RefundTransactionFields refundTransactionData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyChargebackTransactionPost");

            var localVarPath = "/api/gw/{api_key}/chargeback/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (refundTransactionData != null && refundTransactionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(refundTransactionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = refundTransactionData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyChargebackTransactionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefundAnyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RefundAnyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefundAnyResponse)));
        }

        /// <summary>
        /// transaction The method used to refund full transaction amount. You can get transaction title from &#39;create&#39; method when generating the transaction.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundTransactionData">Request body. (optional)</param>
        /// <returns>Task of RefundAnyResponse</returns>
        public async System.Threading.Tasks.Task<RefundAnyResponse> ApiGwApiKeyChargebackTransactionPostAsync (string apiKey, RefundTransactionFields refundTransactionData = null)
        {
             ApiResponse<RefundAnyResponse> localVarResponse = await ApiGwApiKeyChargebackTransactionPostAsyncWithHttpInfo(apiKey, refundTransactionData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// transaction The method used to refund full transaction amount. You can get transaction title from &#39;create&#39; method when generating the transaction.&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; This method works only in production mode!&lt;br/&gt;To test this method, you need to create the transaction in production mode with your own API access.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="refundTransactionData">Request body. (optional)</param>
        /// <returns>Task of ApiResponse (RefundAnyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RefundAnyResponse>> ApiGwApiKeyChargebackTransactionPostAsyncWithHttpInfo (string apiKey, RefundTransactionFields refundTransactionData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyChargebackTransactionPost");

            var localVarPath = "/api/gw/{api_key}/chargeback/transaction";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (refundTransactionData != null && refundTransactionData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(refundTransactionData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = refundTransactionData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyChargebackTransactionPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RefundAnyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RefundAnyResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RefundAnyResponse)));
        }

        /// <summary>
        /// blik This method allows sending a BLIK code in direct communication between merchant and BLIK system. In ‘create’ method you should set 150 as a value for parameter ‘group’, this is a BLIK payment channel. Method returns parameter ‘result’ equal to 1 which means that payment popup has been successfully displayed at customer mobile application. After accepting payment by the customer, tpay.com system sends a standard notification to merchant&#39;s endpoint declared in wyn_url parameter (this parameter should be sent in &#39;create&#39; method.)&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; to test this method, you need to create the transaction with &#39;create&#39; method and replace title parameter value with the returned title.&lt;br/&gt;Blik method works with the specific set of parameters depending on payment type case. Please see BLIK workflow section.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="blikData">Request body. (optional)</param>
        /// <returns>BlikResponse</returns>
        public BlikResponse ApiGwApiKeyTransactionBlikPost (string apiKey, BlikFields blikData = null)
        {
             ApiResponse<BlikResponse> localVarResponse = ApiGwApiKeyTransactionBlikPostWithHttpInfo(apiKey, blikData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// blik This method allows sending a BLIK code in direct communication between merchant and BLIK system. In ‘create’ method you should set 150 as a value for parameter ‘group’, this is a BLIK payment channel. Method returns parameter ‘result’ equal to 1 which means that payment popup has been successfully displayed at customer mobile application. After accepting payment by the customer, tpay.com system sends a standard notification to merchant&#39;s endpoint declared in wyn_url parameter (this parameter should be sent in &#39;create&#39; method.)&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; to test this method, you need to create the transaction with &#39;create&#39; method and replace title parameter value with the returned title.&lt;br/&gt;Blik method works with the specific set of parameters depending on payment type case. Please see BLIK workflow section.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="blikData">Request body. (optional)</param>
        /// <returns>ApiResponse of BlikResponse</returns>
        public ApiResponse< BlikResponse > ApiGwApiKeyTransactionBlikPostWithHttpInfo (string apiKey, BlikFields blikData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyTransactionBlikPost");

            var localVarPath = "/api/gw/{api_key}/transaction/blik";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (blikData != null && blikData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(blikData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = blikData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyTransactionBlikPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlikResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlikResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlikResponse)));
        }

        /// <summary>
        /// blik This method allows sending a BLIK code in direct communication between merchant and BLIK system. In ‘create’ method you should set 150 as a value for parameter ‘group’, this is a BLIK payment channel. Method returns parameter ‘result’ equal to 1 which means that payment popup has been successfully displayed at customer mobile application. After accepting payment by the customer, tpay.com system sends a standard notification to merchant&#39;s endpoint declared in wyn_url parameter (this parameter should be sent in &#39;create&#39; method.)&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; to test this method, you need to create the transaction with &#39;create&#39; method and replace title parameter value with the returned title.&lt;br/&gt;Blik method works with the specific set of parameters depending on payment type case. Please see BLIK workflow section.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="blikData">Request body. (optional)</param>
        /// <returns>Task of BlikResponse</returns>
        public async System.Threading.Tasks.Task<BlikResponse> ApiGwApiKeyTransactionBlikPostAsync (string apiKey, BlikFields blikData = null)
        {
             ApiResponse<BlikResponse> localVarResponse = await ApiGwApiKeyTransactionBlikPostAsyncWithHttpInfo(apiKey, blikData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// blik This method allows sending a BLIK code in direct communication between merchant and BLIK system. In ‘create’ method you should set 150 as a value for parameter ‘group’, this is a BLIK payment channel. Method returns parameter ‘result’ equal to 1 which means that payment popup has been successfully displayed at customer mobile application. After accepting payment by the customer, tpay.com system sends a standard notification to merchant&#39;s endpoint declared in wyn_url parameter (this parameter should be sent in &#39;create&#39; method.)&lt;br/&gt;&lt;br/&gt;&lt;b&gt;NOTICE:&lt;/b&gt; to test this method, you need to create the transaction with &#39;create&#39; method and replace title parameter value with the returned title.&lt;br/&gt;Blik method works with the specific set of parameters depending on payment type case. Please see BLIK workflow section.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="blikData">Request body. (optional)</param>
        /// <returns>Task of ApiResponse (BlikResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BlikResponse>> ApiGwApiKeyTransactionBlikPostAsyncWithHttpInfo (string apiKey, BlikFields blikData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyTransactionBlikPost");

            var localVarPath = "/api/gw/{api_key}/transaction/blik";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (blikData != null && blikData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(blikData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = blikData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyTransactionBlikPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BlikResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BlikResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(BlikResponse)));
        }

        /// <summary>
        /// create This method allows you to prepare transaction for a customer. The method returns transaction title required for other API methods and redirection link for a customer.&lt;br/&gt;This method also returns account details for manual money transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>CreateResponse</returns>
        public CreateResponse ApiGwApiKeyTransactionCreatePost (string apiKey, CreateFields basicData = null)
        {
             ApiResponse<CreateResponse> localVarResponse = ApiGwApiKeyTransactionCreatePostWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create This method allows you to prepare transaction for a customer. The method returns transaction title required for other API methods and redirection link for a customer.&lt;br/&gt;This method also returns account details for manual money transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>ApiResponse of CreateResponse</returns>
        public ApiResponse< CreateResponse > ApiGwApiKeyTransactionCreatePostWithHttpInfo (string apiKey, CreateFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyTransactionCreatePost");

            var localVarPath = "/api/gw/{api_key}/transaction/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyTransactionCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResponse)));
        }

        /// <summary>
        /// create This method allows you to prepare transaction for a customer. The method returns transaction title required for other API methods and redirection link for a customer.&lt;br/&gt;This method also returns account details for manual money transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of CreateResponse</returns>
        public async System.Threading.Tasks.Task<CreateResponse> ApiGwApiKeyTransactionCreatePostAsync (string apiKey, CreateFields basicData = null)
        {
             ApiResponse<CreateResponse> localVarResponse = await ApiGwApiKeyTransactionCreatePostAsyncWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create This method allows you to prepare transaction for a customer. The method returns transaction title required for other API methods and redirection link for a customer.&lt;br/&gt;This method also returns account details for manual money transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of ApiResponse (CreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CreateResponse>> ApiGwApiKeyTransactionCreatePostAsyncWithHttpInfo (string apiKey, CreateFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyTransactionCreatePost");

            var localVarPath = "/api/gw/{api_key}/transaction/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyTransactionCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CreateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreateResponse)));
        }

        /// <summary>
        /// get This method allows you to get all information about the transaction by sending previously generated title.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="getData">Request body. (optional)</param>
        /// <returns>GetResponse</returns>
        public GetResponse ApiGwApiKeyTransactionGetPost (string apiKey, GetFields getData = null)
        {
             ApiResponse<GetResponse> localVarResponse = ApiGwApiKeyTransactionGetPostWithHttpInfo(apiKey, getData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// get This method allows you to get all information about the transaction by sending previously generated title.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="getData">Request body. (optional)</param>
        /// <returns>ApiResponse of GetResponse</returns>
        public ApiResponse< GetResponse > ApiGwApiKeyTransactionGetPostWithHttpInfo (string apiKey, GetFields getData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyTransactionGetPost");

            var localVarPath = "/api/gw/{api_key}/transaction/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (getData != null && getData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyTransactionGetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetResponse)));
        }

        /// <summary>
        /// get This method allows you to get all information about the transaction by sending previously generated title.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="getData">Request body. (optional)</param>
        /// <returns>Task of GetResponse</returns>
        public async System.Threading.Tasks.Task<GetResponse> ApiGwApiKeyTransactionGetPostAsync (string apiKey, GetFields getData = null)
        {
             ApiResponse<GetResponse> localVarResponse = await ApiGwApiKeyTransactionGetPostAsyncWithHttpInfo(apiKey, getData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// get This method allows you to get all information about the transaction by sending previously generated title.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="getData">Request body. (optional)</param>
        /// <returns>Task of ApiResponse (GetResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetResponse>> ApiGwApiKeyTransactionGetPostAsyncWithHttpInfo (string apiKey, GetFields getData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyTransactionGetPost");

            var localVarPath = "/api/gw/{api_key}/transaction/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (getData != null && getData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(getData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = getData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyTransactionGetPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetResponse)));
        }

        /// <summary>
        /// report This method returns payments report for the declared time range, generated in CSV format (semicolon separators) and encoded in base64 - the same format as in merchant panel. If you like to arrange result as an associative array, you can use the ready &lt;a href&#x3D;\&quot;https://github.com/tpay-com/tpay-php/blob/master/tpayLibs/examples/TransactionReportsApi.php\&quot; target&#x3D;\&quot;_blank\&quot;&gt;script&lt;/a&gt; from Tpay PHP library.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="reportData">Request body. (optional)</param>
        /// <returns>ReportResponse</returns>
        public ReportResponse ApiGwApiKeyTransactionReportPost (string apiKey, ReportFields reportData = null)
        {
             ApiResponse<ReportResponse> localVarResponse = ApiGwApiKeyTransactionReportPostWithHttpInfo(apiKey, reportData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// report This method returns payments report for the declared time range, generated in CSV format (semicolon separators) and encoded in base64 - the same format as in merchant panel. If you like to arrange result as an associative array, you can use the ready &lt;a href&#x3D;\&quot;https://github.com/tpay-com/tpay-php/blob/master/tpayLibs/examples/TransactionReportsApi.php\&quot; target&#x3D;\&quot;_blank\&quot;&gt;script&lt;/a&gt; from Tpay PHP library.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="reportData">Request body. (optional)</param>
        /// <returns>ApiResponse of ReportResponse</returns>
        public ApiResponse< ReportResponse > ApiGwApiKeyTransactionReportPostWithHttpInfo (string apiKey, ReportFields reportData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyTransactionReportPost");

            var localVarPath = "/api/gw/{api_key}/transaction/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (reportData != null && reportData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reportData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyTransactionReportPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportResponse)));
        }

        /// <summary>
        /// report This method returns payments report for the declared time range, generated in CSV format (semicolon separators) and encoded in base64 - the same format as in merchant panel. If you like to arrange result as an associative array, you can use the ready &lt;a href&#x3D;\&quot;https://github.com/tpay-com/tpay-php/blob/master/tpayLibs/examples/TransactionReportsApi.php\&quot; target&#x3D;\&quot;_blank\&quot;&gt;script&lt;/a&gt; from Tpay PHP library.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="reportData">Request body. (optional)</param>
        /// <returns>Task of ReportResponse</returns>
        public async System.Threading.Tasks.Task<ReportResponse> ApiGwApiKeyTransactionReportPostAsync (string apiKey, ReportFields reportData = null)
        {
             ApiResponse<ReportResponse> localVarResponse = await ApiGwApiKeyTransactionReportPostAsyncWithHttpInfo(apiKey, reportData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// report This method returns payments report for the declared time range, generated in CSV format (semicolon separators) and encoded in base64 - the same format as in merchant panel. If you like to arrange result as an associative array, you can use the ready &lt;a href&#x3D;\&quot;https://github.com/tpay-com/tpay-php/blob/master/tpayLibs/examples/TransactionReportsApi.php\&quot; target&#x3D;\&quot;_blank\&quot;&gt;script&lt;/a&gt; from Tpay PHP library.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="reportData">Request body. (optional)</param>
        /// <returns>Task of ApiResponse (ReportResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ReportResponse>> ApiGwApiKeyTransactionReportPostAsyncWithHttpInfo (string apiKey, ReportFields reportData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling TransactionAPIApi->ApiGwApiKeyTransactionReportPost");

            var localVarPath = "/api/gw/{api_key}/transaction/report";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (reportData != null && reportData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(reportData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = reportData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyTransactionReportPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ReportResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ReportResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ReportResponse)));
        }

    }
}

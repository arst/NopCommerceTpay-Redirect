/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMasspaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// authorize
        /// </summary>
        /// <remarks>
        /// This method authorizes the processing of chosen pack of transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>MasspaymentAuthorizeResponse</returns>
        MasspaymentAuthorizeResponse ApiGwApiKeyMasspaymentAuthorizePost (string apiKey, MasspaymentAuthorizeFields basicData = null);

        /// <summary>
        /// authorize
        /// </summary>
        /// <remarks>
        /// This method authorizes the processing of chosen pack of transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>ApiResponse of MasspaymentAuthorizeResponse</returns>
        ApiResponse<MasspaymentAuthorizeResponse> ApiGwApiKeyMasspaymentAuthorizePostWithHttpInfo (string apiKey, MasspaymentAuthorizeFields basicData = null);
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// This method adds a pack of transfers to the Tpay system. After executing a correct operation, you need to request authorize method to confirm payout processing. Transfers are being made once a day on workdays. You can find confirmation code in Merchant Panel, settings tab-&gt; notifications. Variable $seller_id is Merchant’s ID in tpay.com system. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Example CSV file&lt;/b&gt;&lt;br/&gt; Each line contains one transfer formatted as in the example below. Columns are separated by a semicolon. &lt;br/&gt; The file does not have a header.&lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Tpay transaction ID&lt;br/&gt;&lt;br/&gt; Place transfer receiver name in 1-4 receiver fields. Each field can be maximum 35 characters long.&lt;br/&gt; If receiver name is for example 40 characters long, you should put 35 in receiver 1 field, and 5 characters in receiver 2 field.&lt;br/&gt; The same rule is valid for title field. The transaction ID field is not required, whithout this field, the file format looks like this: &lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Transaction ID from merchant system&lt;br/&gt;&lt;br/&gt; Example CSV file can be downloaded from:&lt;br/&gt; &lt;a href&#x3D;\&quot;https://secure.tpay.com/partner/pliki/przyklad.csv\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Download&lt;/a&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>MasspaymentCreateResponse</returns>
        MasspaymentCreateResponse ApiGwApiKeyMasspaymentCreatePost (string apiKey, MasspaymentCreateFields basicData = null);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// This method adds a pack of transfers to the Tpay system. After executing a correct operation, you need to request authorize method to confirm payout processing. Transfers are being made once a day on workdays. You can find confirmation code in Merchant Panel, settings tab-&gt; notifications. Variable $seller_id is Merchant’s ID in tpay.com system. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Example CSV file&lt;/b&gt;&lt;br/&gt; Each line contains one transfer formatted as in the example below. Columns are separated by a semicolon. &lt;br/&gt; The file does not have a header.&lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Tpay transaction ID&lt;br/&gt;&lt;br/&gt; Place transfer receiver name in 1-4 receiver fields. Each field can be maximum 35 characters long.&lt;br/&gt; If receiver name is for example 40 characters long, you should put 35 in receiver 1 field, and 5 characters in receiver 2 field.&lt;br/&gt; The same rule is valid for title field. The transaction ID field is not required, whithout this field, the file format looks like this: &lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Transaction ID from merchant system&lt;br/&gt;&lt;br/&gt; Example CSV file can be downloaded from:&lt;br/&gt; &lt;a href&#x3D;\&quot;https://secure.tpay.com/partner/pliki/przyklad.csv\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Download&lt;/a&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>ApiResponse of MasspaymentCreateResponse</returns>
        ApiResponse<MasspaymentCreateResponse> ApiGwApiKeyMasspaymentCreatePostWithHttpInfo (string apiKey, MasspaymentCreateFields basicData = null);
        /// <summary>
        /// packs
        /// </summary>
        /// <remarks>
        /// This method allows browsing through created packages. If none of the parameters has been sent, all packages for the Merchant’s account will be returned. If any records exist, there will be pack objects in pack section representing respective transfer packages. You can send pack_id to browse contents of specific pack or send time range to browse all packages within time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>MasspaymentPacksResponse</returns>
        MasspaymentPacksResponse ApiGwApiKeyMasspaymentPacksPost (string apiKey, MasspaymentPacksFields basicData = null);

        /// <summary>
        /// packs
        /// </summary>
        /// <remarks>
        /// This method allows browsing through created packages. If none of the parameters has been sent, all packages for the Merchant’s account will be returned. If any records exist, there will be pack objects in pack section representing respective transfer packages. You can send pack_id to browse contents of specific pack or send time range to browse all packages within time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>ApiResponse of MasspaymentPacksResponse</returns>
        ApiResponse<MasspaymentPacksResponse> ApiGwApiKeyMasspaymentPacksPostWithHttpInfo (string apiKey, MasspaymentPacksFields basicData = null);
        /// <summary>
        /// transfers
        /// </summary>
        /// <remarks>
        /// This method allows browsing through transfers within one package. Required parameters (besides those described in mass payments main description), at least 1 is obligatory. If any records exist, there will be transfer objects in transfers section representing several transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>MasspaymentTransfersResponse</returns>
        MasspaymentTransfersResponse ApiGwApiKeyMasspaymentTransfersPost (string apiKey, MasspaymentTransfersFields basicData = null);

        /// <summary>
        /// transfers
        /// </summary>
        /// <remarks>
        /// This method allows browsing through transfers within one package. Required parameters (besides those described in mass payments main description), at least 1 is obligatory. If any records exist, there will be transfer objects in transfers section representing several transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>ApiResponse of MasspaymentTransfersResponse</returns>
        ApiResponse<MasspaymentTransfersResponse> ApiGwApiKeyMasspaymentTransfersPostWithHttpInfo (string apiKey, MasspaymentTransfersFields basicData = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// authorize
        /// </summary>
        /// <remarks>
        /// This method authorizes the processing of chosen pack of transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of MasspaymentAuthorizeResponse</returns>
        System.Threading.Tasks.Task<MasspaymentAuthorizeResponse> ApiGwApiKeyMasspaymentAuthorizePostAsync (string apiKey, MasspaymentAuthorizeFields basicData = null);

        /// <summary>
        /// authorize
        /// </summary>
        /// <remarks>
        /// This method authorizes the processing of chosen pack of transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of ApiResponse (MasspaymentAuthorizeResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MasspaymentAuthorizeResponse>> ApiGwApiKeyMasspaymentAuthorizePostAsyncWithHttpInfo (string apiKey, MasspaymentAuthorizeFields basicData = null);
        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// This method adds a pack of transfers to the Tpay system. After executing a correct operation, you need to request authorize method to confirm payout processing. Transfers are being made once a day on workdays. You can find confirmation code in Merchant Panel, settings tab-&gt; notifications. Variable $seller_id is Merchant’s ID in tpay.com system. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Example CSV file&lt;/b&gt;&lt;br/&gt; Each line contains one transfer formatted as in the example below. Columns are separated by a semicolon. &lt;br/&gt; The file does not have a header.&lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Tpay transaction ID&lt;br/&gt;&lt;br/&gt; Place transfer receiver name in 1-4 receiver fields. Each field can be maximum 35 characters long.&lt;br/&gt; If receiver name is for example 40 characters long, you should put 35 in receiver 1 field, and 5 characters in receiver 2 field.&lt;br/&gt; The same rule is valid for title field. The transaction ID field is not required, whithout this field, the file format looks like this: &lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Transaction ID from merchant system&lt;br/&gt;&lt;br/&gt; Example CSV file can be downloaded from:&lt;br/&gt; &lt;a href&#x3D;\&quot;https://secure.tpay.com/partner/pliki/przyklad.csv\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Download&lt;/a&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of MasspaymentCreateResponse</returns>
        System.Threading.Tasks.Task<MasspaymentCreateResponse> ApiGwApiKeyMasspaymentCreatePostAsync (string apiKey, MasspaymentCreateFields basicData = null);

        /// <summary>
        /// create
        /// </summary>
        /// <remarks>
        /// This method adds a pack of transfers to the Tpay system. After executing a correct operation, you need to request authorize method to confirm payout processing. Transfers are being made once a day on workdays. You can find confirmation code in Merchant Panel, settings tab-&gt; notifications. Variable $seller_id is Merchant’s ID in tpay.com system. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Example CSV file&lt;/b&gt;&lt;br/&gt; Each line contains one transfer formatted as in the example below. Columns are separated by a semicolon. &lt;br/&gt; The file does not have a header.&lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Tpay transaction ID&lt;br/&gt;&lt;br/&gt; Place transfer receiver name in 1-4 receiver fields. Each field can be maximum 35 characters long.&lt;br/&gt; If receiver name is for example 40 characters long, you should put 35 in receiver 1 field, and 5 characters in receiver 2 field.&lt;br/&gt; The same rule is valid for title field. The transaction ID field is not required, whithout this field, the file format looks like this: &lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Transaction ID from merchant system&lt;br/&gt;&lt;br/&gt; Example CSV file can be downloaded from:&lt;br/&gt; &lt;a href&#x3D;\&quot;https://secure.tpay.com/partner/pliki/przyklad.csv\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Download&lt;/a&gt; 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of ApiResponse (MasspaymentCreateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MasspaymentCreateResponse>> ApiGwApiKeyMasspaymentCreatePostAsyncWithHttpInfo (string apiKey, MasspaymentCreateFields basicData = null);
        /// <summary>
        /// packs
        /// </summary>
        /// <remarks>
        /// This method allows browsing through created packages. If none of the parameters has been sent, all packages for the Merchant’s account will be returned. If any records exist, there will be pack objects in pack section representing respective transfer packages. You can send pack_id to browse contents of specific pack or send time range to browse all packages within time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of MasspaymentPacksResponse</returns>
        System.Threading.Tasks.Task<MasspaymentPacksResponse> ApiGwApiKeyMasspaymentPacksPostAsync (string apiKey, MasspaymentPacksFields basicData = null);

        /// <summary>
        /// packs
        /// </summary>
        /// <remarks>
        /// This method allows browsing through created packages. If none of the parameters has been sent, all packages for the Merchant’s account will be returned. If any records exist, there will be pack objects in pack section representing respective transfer packages. You can send pack_id to browse contents of specific pack or send time range to browse all packages within time range
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of ApiResponse (MasspaymentPacksResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MasspaymentPacksResponse>> ApiGwApiKeyMasspaymentPacksPostAsyncWithHttpInfo (string apiKey, MasspaymentPacksFields basicData = null);
        /// <summary>
        /// transfers
        /// </summary>
        /// <remarks>
        /// This method allows browsing through transfers within one package. Required parameters (besides those described in mass payments main description), at least 1 is obligatory. If any records exist, there will be transfer objects in transfers section representing several transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of MasspaymentTransfersResponse</returns>
        System.Threading.Tasks.Task<MasspaymentTransfersResponse> ApiGwApiKeyMasspaymentTransfersPostAsync (string apiKey, MasspaymentTransfersFields basicData = null);

        /// <summary>
        /// transfers
        /// </summary>
        /// <remarks>
        /// This method allows browsing through transfers within one package. Required parameters (besides those described in mass payments main description), at least 1 is obligatory. If any records exist, there will be transfer objects in transfers section representing several transfers.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of ApiResponse (MasspaymentTransfersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MasspaymentTransfersResponse>> ApiGwApiKeyMasspaymentTransfersPostAsyncWithHttpInfo (string apiKey, MasspaymentTransfersFields basicData = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MasspaymentsApi : IMasspaymentsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MasspaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MasspaymentsApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MasspaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MasspaymentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// authorize This method authorizes the processing of chosen pack of transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>MasspaymentAuthorizeResponse</returns>
        public MasspaymentAuthorizeResponse ApiGwApiKeyMasspaymentAuthorizePost (string apiKey, MasspaymentAuthorizeFields basicData = null)
        {
             ApiResponse<MasspaymentAuthorizeResponse> localVarResponse = ApiGwApiKeyMasspaymentAuthorizePostWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// authorize This method authorizes the processing of chosen pack of transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>ApiResponse of MasspaymentAuthorizeResponse</returns>
        public ApiResponse< MasspaymentAuthorizeResponse > ApiGwApiKeyMasspaymentAuthorizePostWithHttpInfo (string apiKey, MasspaymentAuthorizeFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MasspaymentsApi->ApiGwApiKeyMasspaymentAuthorizePost");

            var localVarPath = "/api/gw/{api_key}/masspayment/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyMasspaymentAuthorizePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasspaymentAuthorizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MasspaymentAuthorizeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasspaymentAuthorizeResponse)));
        }

        /// <summary>
        /// authorize This method authorizes the processing of chosen pack of transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of MasspaymentAuthorizeResponse</returns>
        public async System.Threading.Tasks.Task<MasspaymentAuthorizeResponse> ApiGwApiKeyMasspaymentAuthorizePostAsync (string apiKey, MasspaymentAuthorizeFields basicData = null)
        {
             ApiResponse<MasspaymentAuthorizeResponse> localVarResponse = await ApiGwApiKeyMasspaymentAuthorizePostAsyncWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// authorize This method authorizes the processing of chosen pack of transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of ApiResponse (MasspaymentAuthorizeResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MasspaymentAuthorizeResponse>> ApiGwApiKeyMasspaymentAuthorizePostAsyncWithHttpInfo (string apiKey, MasspaymentAuthorizeFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MasspaymentsApi->ApiGwApiKeyMasspaymentAuthorizePost");

            var localVarPath = "/api/gw/{api_key}/masspayment/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyMasspaymentAuthorizePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasspaymentAuthorizeResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MasspaymentAuthorizeResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasspaymentAuthorizeResponse)));
        }

        /// <summary>
        /// create This method adds a pack of transfers to the Tpay system. After executing a correct operation, you need to request authorize method to confirm payout processing. Transfers are being made once a day on workdays. You can find confirmation code in Merchant Panel, settings tab-&gt; notifications. Variable $seller_id is Merchant’s ID in tpay.com system. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Example CSV file&lt;/b&gt;&lt;br/&gt; Each line contains one transfer formatted as in the example below. Columns are separated by a semicolon. &lt;br/&gt; The file does not have a header.&lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Tpay transaction ID&lt;br/&gt;&lt;br/&gt; Place transfer receiver name in 1-4 receiver fields. Each field can be maximum 35 characters long.&lt;br/&gt; If receiver name is for example 40 characters long, you should put 35 in receiver 1 field, and 5 characters in receiver 2 field.&lt;br/&gt; The same rule is valid for title field. The transaction ID field is not required, whithout this field, the file format looks like this: &lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Transaction ID from merchant system&lt;br/&gt;&lt;br/&gt; Example CSV file can be downloaded from:&lt;br/&gt; &lt;a href&#x3D;\&quot;https://secure.tpay.com/partner/pliki/przyklad.csv\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Download&lt;/a&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>MasspaymentCreateResponse</returns>
        public MasspaymentCreateResponse ApiGwApiKeyMasspaymentCreatePost (string apiKey, MasspaymentCreateFields basicData = null)
        {
             ApiResponse<MasspaymentCreateResponse> localVarResponse = ApiGwApiKeyMasspaymentCreatePostWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// create This method adds a pack of transfers to the Tpay system. After executing a correct operation, you need to request authorize method to confirm payout processing. Transfers are being made once a day on workdays. You can find confirmation code in Merchant Panel, settings tab-&gt; notifications. Variable $seller_id is Merchant’s ID in tpay.com system. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Example CSV file&lt;/b&gt;&lt;br/&gt; Each line contains one transfer formatted as in the example below. Columns are separated by a semicolon. &lt;br/&gt; The file does not have a header.&lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Tpay transaction ID&lt;br/&gt;&lt;br/&gt; Place transfer receiver name in 1-4 receiver fields. Each field can be maximum 35 characters long.&lt;br/&gt; If receiver name is for example 40 characters long, you should put 35 in receiver 1 field, and 5 characters in receiver 2 field.&lt;br/&gt; The same rule is valid for title field. The transaction ID field is not required, whithout this field, the file format looks like this: &lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Transaction ID from merchant system&lt;br/&gt;&lt;br/&gt; Example CSV file can be downloaded from:&lt;br/&gt; &lt;a href&#x3D;\&quot;https://secure.tpay.com/partner/pliki/przyklad.csv\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Download&lt;/a&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>ApiResponse of MasspaymentCreateResponse</returns>
        public ApiResponse< MasspaymentCreateResponse > ApiGwApiKeyMasspaymentCreatePostWithHttpInfo (string apiKey, MasspaymentCreateFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MasspaymentsApi->ApiGwApiKeyMasspaymentCreatePost");

            var localVarPath = "/api/gw/{api_key}/masspayment/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyMasspaymentCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasspaymentCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MasspaymentCreateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasspaymentCreateResponse)));
        }

        /// <summary>
        /// create This method adds a pack of transfers to the Tpay system. After executing a correct operation, you need to request authorize method to confirm payout processing. Transfers are being made once a day on workdays. You can find confirmation code in Merchant Panel, settings tab-&gt; notifications. Variable $seller_id is Merchant’s ID in tpay.com system. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Example CSV file&lt;/b&gt;&lt;br/&gt; Each line contains one transfer formatted as in the example below. Columns are separated by a semicolon. &lt;br/&gt; The file does not have a header.&lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Tpay transaction ID&lt;br/&gt;&lt;br/&gt; Place transfer receiver name in 1-4 receiver fields. Each field can be maximum 35 characters long.&lt;br/&gt; If receiver name is for example 40 characters long, you should put 35 in receiver 1 field, and 5 characters in receiver 2 field.&lt;br/&gt; The same rule is valid for title field. The transaction ID field is not required, whithout this field, the file format looks like this: &lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Transaction ID from merchant system&lt;br/&gt;&lt;br/&gt; Example CSV file can be downloaded from:&lt;br/&gt; &lt;a href&#x3D;\&quot;https://secure.tpay.com/partner/pliki/przyklad.csv\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Download&lt;/a&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of MasspaymentCreateResponse</returns>
        public async System.Threading.Tasks.Task<MasspaymentCreateResponse> ApiGwApiKeyMasspaymentCreatePostAsync (string apiKey, MasspaymentCreateFields basicData = null)
        {
             ApiResponse<MasspaymentCreateResponse> localVarResponse = await ApiGwApiKeyMasspaymentCreatePostAsyncWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// create This method adds a pack of transfers to the Tpay system. After executing a correct operation, you need to request authorize method to confirm payout processing. Transfers are being made once a day on workdays. You can find confirmation code in Merchant Panel, settings tab-&gt; notifications. Variable $seller_id is Merchant’s ID in tpay.com system. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Example CSV file&lt;/b&gt;&lt;br/&gt; Each line contains one transfer formatted as in the example below. Columns are separated by a semicolon. &lt;br/&gt; The file does not have a header.&lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Tpay transaction ID&lt;br/&gt;&lt;br/&gt; Place transfer receiver name in 1-4 receiver fields. Each field can be maximum 35 characters long.&lt;br/&gt; If receiver name is for example 40 characters long, you should put 35 in receiver 1 field, and 5 characters in receiver 2 field.&lt;br/&gt; The same rule is valid for title field. The transaction ID field is not required, whithout this field, the file format looks like this: &lt;br/&gt;&lt;br/&gt; account number (26 digits);receiver (part 1) (35 characters);receiver (part 2) (35 characters);receiver (part 3) (35 characters);receiver (part 4) (35 characters);amount (dot or comma separator);title (part 1) (35 characters);title (part 2) (35 characters);Transaction ID from merchant system&lt;br/&gt;&lt;br/&gt; Example CSV file can be downloaded from:&lt;br/&gt; &lt;a href&#x3D;\&quot;https://secure.tpay.com/partner/pliki/przyklad.csv\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Download&lt;/a&gt; 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of ApiResponse (MasspaymentCreateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MasspaymentCreateResponse>> ApiGwApiKeyMasspaymentCreatePostAsyncWithHttpInfo (string apiKey, MasspaymentCreateFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MasspaymentsApi->ApiGwApiKeyMasspaymentCreatePost");

            var localVarPath = "/api/gw/{api_key}/masspayment/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyMasspaymentCreatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasspaymentCreateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MasspaymentCreateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasspaymentCreateResponse)));
        }

        /// <summary>
        /// packs This method allows browsing through created packages. If none of the parameters has been sent, all packages for the Merchant’s account will be returned. If any records exist, there will be pack objects in pack section representing respective transfer packages. You can send pack_id to browse contents of specific pack or send time range to browse all packages within time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>MasspaymentPacksResponse</returns>
        public MasspaymentPacksResponse ApiGwApiKeyMasspaymentPacksPost (string apiKey, MasspaymentPacksFields basicData = null)
        {
             ApiResponse<MasspaymentPacksResponse> localVarResponse = ApiGwApiKeyMasspaymentPacksPostWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// packs This method allows browsing through created packages. If none of the parameters has been sent, all packages for the Merchant’s account will be returned. If any records exist, there will be pack objects in pack section representing respective transfer packages. You can send pack_id to browse contents of specific pack or send time range to browse all packages within time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>ApiResponse of MasspaymentPacksResponse</returns>
        public ApiResponse< MasspaymentPacksResponse > ApiGwApiKeyMasspaymentPacksPostWithHttpInfo (string apiKey, MasspaymentPacksFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MasspaymentsApi->ApiGwApiKeyMasspaymentPacksPost");

            var localVarPath = "/api/gw/{api_key}/masspayment/packs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyMasspaymentPacksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasspaymentPacksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MasspaymentPacksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasspaymentPacksResponse)));
        }

        /// <summary>
        /// packs This method allows browsing through created packages. If none of the parameters has been sent, all packages for the Merchant’s account will be returned. If any records exist, there will be pack objects in pack section representing respective transfer packages. You can send pack_id to browse contents of specific pack or send time range to browse all packages within time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of MasspaymentPacksResponse</returns>
        public async System.Threading.Tasks.Task<MasspaymentPacksResponse> ApiGwApiKeyMasspaymentPacksPostAsync (string apiKey, MasspaymentPacksFields basicData = null)
        {
             ApiResponse<MasspaymentPacksResponse> localVarResponse = await ApiGwApiKeyMasspaymentPacksPostAsyncWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// packs This method allows browsing through created packages. If none of the parameters has been sent, all packages for the Merchant’s account will be returned. If any records exist, there will be pack objects in pack section representing respective transfer packages. You can send pack_id to browse contents of specific pack or send time range to browse all packages within time range
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of ApiResponse (MasspaymentPacksResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MasspaymentPacksResponse>> ApiGwApiKeyMasspaymentPacksPostAsyncWithHttpInfo (string apiKey, MasspaymentPacksFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MasspaymentsApi->ApiGwApiKeyMasspaymentPacksPost");

            var localVarPath = "/api/gw/{api_key}/masspayment/packs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyMasspaymentPacksPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasspaymentPacksResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MasspaymentPacksResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasspaymentPacksResponse)));
        }

        /// <summary>
        /// transfers This method allows browsing through transfers within one package. Required parameters (besides those described in mass payments main description), at least 1 is obligatory. If any records exist, there will be transfer objects in transfers section representing several transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>MasspaymentTransfersResponse</returns>
        public MasspaymentTransfersResponse ApiGwApiKeyMasspaymentTransfersPost (string apiKey, MasspaymentTransfersFields basicData = null)
        {
             ApiResponse<MasspaymentTransfersResponse> localVarResponse = ApiGwApiKeyMasspaymentTransfersPostWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// transfers This method allows browsing through transfers within one package. Required parameters (besides those described in mass payments main description), at least 1 is obligatory. If any records exist, there will be transfer objects in transfers section representing several transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>ApiResponse of MasspaymentTransfersResponse</returns>
        public ApiResponse< MasspaymentTransfersResponse > ApiGwApiKeyMasspaymentTransfersPostWithHttpInfo (string apiKey, MasspaymentTransfersFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MasspaymentsApi->ApiGwApiKeyMasspaymentTransfersPost");

            var localVarPath = "/api/gw/{api_key}/masspayment/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyMasspaymentTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasspaymentTransfersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MasspaymentTransfersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasspaymentTransfersResponse)));
        }

        /// <summary>
        /// transfers This method allows browsing through transfers within one package. Required parameters (besides those described in mass payments main description), at least 1 is obligatory. If any records exist, there will be transfer objects in transfers section representing several transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of MasspaymentTransfersResponse</returns>
        public async System.Threading.Tasks.Task<MasspaymentTransfersResponse> ApiGwApiKeyMasspaymentTransfersPostAsync (string apiKey, MasspaymentTransfersFields basicData = null)
        {
             ApiResponse<MasspaymentTransfersResponse> localVarResponse = await ApiGwApiKeyMasspaymentTransfersPostAsyncWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// transfers This method allows browsing through transfers within one package. Required parameters (besides those described in mass payments main description), at least 1 is obligatory. If any records exist, there will be transfer objects in transfers section representing several transfers.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Transaction data. (optional)</param>
        /// <returns>Task of ApiResponse (MasspaymentTransfersResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MasspaymentTransfersResponse>> ApiGwApiKeyMasspaymentTransfersPostAsyncWithHttpInfo (string apiKey, MasspaymentTransfersFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling MasspaymentsApi->ApiGwApiKeyMasspaymentTransfersPost");

            var localVarPath = "/api/gw/{api_key}/masspayment/transfers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyMasspaymentTransfersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MasspaymentTransfersResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MasspaymentTransfersResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MasspaymentTransfersResponse)));
        }

    }
}

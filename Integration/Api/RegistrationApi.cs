/* 
 * Tpay.com Technical Documentation
 *
 *  <p class=\"changes-disclaimer\"> Demo transaction/masspayments api key: <input type=\"text\" id=\"transaction_key\" value=\"75f86137a6635df826e3efe2e66f7c9a946fdde1\" class=\"ui-form-control\"/><label for=\"transaction_key\" style=\"display: none;\" id=\"tr_api_label\">COPIED!</label><br/><br/> Demo cards api key: <input type=\"text\" id=\"cards_key\" value=\"ba9a05faa697f9b43f39b84933ff168e373c6496\" class=\"ui-form-control\"/><label for=\"cards_key\" style=\"display: none;\" id=\"cards_api_label\">COPIED!</label><br/><br/> Demo registration api key: <input type=\"text\" id=\"registration_key\" value=\"6c0f5ef6e4d6877abad7fcfb3b5de117ad8b772d\" class=\"ui-form-control\"/><label for=\"registration_key\" style=\"display: none;\" id=\"registration_api_label\">COPIED!</label><br/><br/> The terms seller and merchant are used interchangeably and they both refer to a person or a company registered at tpay.com to accept online payments. <br/> Whenever term merchant panel is used it refers to the part of tpay.com website located at <a href=\"https://secure.tpay.com/panel\" target=\"_blank\">secure.tpay.com/panel</a>. <br/><br/> For sandbox purposes use merchant demo account <br/><br/> ID - 1010, Password - demo<br/><br/>Remember that this is a shared account, so all data passed through will be publicly visible.</p>
 *
 * OpenAPI spec version: 1.1.1
 * Contact: pt@tpay.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRegistrationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// inputs
        /// </summary>
        /// <remarks>
        /// This method returns branches list and legal forms list which are available in Tpay.com. These data are required to correctly merchant registration. Branch id and legal form id should be sent in register method.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Registration inputs. (optional)</param>
        /// <returns>RegistrationInputsResponse</returns>
        RegistrationInputsResponse ApiGwApiKeyRegistrationInputsPost (string apiKey, RegistrationInputFields basicData = null);

        /// <summary>
        /// inputs
        /// </summary>
        /// <remarks>
        /// This method returns branches list and legal forms list which are available in Tpay.com. These data are required to correctly merchant registration. Branch id and legal form id should be sent in register method.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Registration inputs. (optional)</param>
        /// <returns>ApiResponse of RegistrationInputsResponse</returns>
        ApiResponse<RegistrationInputsResponse> ApiGwApiKeyRegistrationInputsPostWithHttpInfo (string apiKey, RegistrationInputFields basicData = null);
        /// <summary>
        /// register
        /// </summary>
        /// <remarks>
        /// This method allows register new account in Tpay.com system. In response, the method returns data which can be used to generate new transactions. Optionally method returns access data for API transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="registrtationRegisterData">Register data (optional)</param>
        /// <returns>RegistrationRegisterResponse</returns>
        RegistrationRegisterResponse ApiGwApiKeyRegistrationRegisterPost (string apiKey, RegisterFields registrtationRegisterData = null);

        /// <summary>
        /// register
        /// </summary>
        /// <remarks>
        /// This method allows register new account in Tpay.com system. In response, the method returns data which can be used to generate new transactions. Optionally method returns access data for API transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="registrtationRegisterData">Register data (optional)</param>
        /// <returns>ApiResponse of RegistrationRegisterResponse</returns>
        ApiResponse<RegistrationRegisterResponse> ApiGwApiKeyRegistrationRegisterPostWithHttpInfo (string apiKey, RegisterFields registrtationRegisterData = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// inputs
        /// </summary>
        /// <remarks>
        /// This method returns branches list and legal forms list which are available in Tpay.com. These data are required to correctly merchant registration. Branch id and legal form id should be sent in register method.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Registration inputs. (optional)</param>
        /// <returns>Task of RegistrationInputsResponse</returns>
        System.Threading.Tasks.Task<RegistrationInputsResponse> ApiGwApiKeyRegistrationInputsPostAsync (string apiKey, RegistrationInputFields basicData = null);

        /// <summary>
        /// inputs
        /// </summary>
        /// <remarks>
        /// This method returns branches list and legal forms list which are available in Tpay.com. These data are required to correctly merchant registration. Branch id and legal form id should be sent in register method.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Registration inputs. (optional)</param>
        /// <returns>Task of ApiResponse (RegistrationInputsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationInputsResponse>> ApiGwApiKeyRegistrationInputsPostAsyncWithHttpInfo (string apiKey, RegistrationInputFields basicData = null);
        /// <summary>
        /// register
        /// </summary>
        /// <remarks>
        /// This method allows register new account in Tpay.com system. In response, the method returns data which can be used to generate new transactions. Optionally method returns access data for API transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="registrtationRegisterData">Register data (optional)</param>
        /// <returns>Task of RegistrationRegisterResponse</returns>
        System.Threading.Tasks.Task<RegistrationRegisterResponse> ApiGwApiKeyRegistrationRegisterPostAsync (string apiKey, RegisterFields registrtationRegisterData = null);

        /// <summary>
        /// register
        /// </summary>
        /// <remarks>
        /// This method allows register new account in Tpay.com system. In response, the method returns data which can be used to generate new transactions. Optionally method returns access data for API transactions
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="registrtationRegisterData">Register data (optional)</param>
        /// <returns>Task of ApiResponse (RegistrationRegisterResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RegistrationRegisterResponse>> ApiGwApiKeyRegistrationRegisterPostAsyncWithHttpInfo (string apiKey, RegisterFields registrtationRegisterData = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RegistrationApi : IRegistrationApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RegistrationApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RegistrationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// inputs This method returns branches list and legal forms list which are available in Tpay.com. These data are required to correctly merchant registration. Branch id and legal form id should be sent in register method.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Registration inputs. (optional)</param>
        /// <returns>RegistrationInputsResponse</returns>
        public RegistrationInputsResponse ApiGwApiKeyRegistrationInputsPost (string apiKey, RegistrationInputFields basicData = null)
        {
             ApiResponse<RegistrationInputsResponse> localVarResponse = ApiGwApiKeyRegistrationInputsPostWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// inputs This method returns branches list and legal forms list which are available in Tpay.com. These data are required to correctly merchant registration. Branch id and legal form id should be sent in register method.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Registration inputs. (optional)</param>
        /// <returns>ApiResponse of RegistrationInputsResponse</returns>
        public ApiResponse< RegistrationInputsResponse > ApiGwApiKeyRegistrationInputsPostWithHttpInfo (string apiKey, RegistrationInputFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RegistrationApi->ApiGwApiKeyRegistrationInputsPost");

            var localVarPath = "/api/gw/{api_key}/registration/inputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyRegistrationInputsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationInputsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationInputsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationInputsResponse)));
        }

        /// <summary>
        /// inputs This method returns branches list and legal forms list which are available in Tpay.com. These data are required to correctly merchant registration. Branch id and legal form id should be sent in register method.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Registration inputs. (optional)</param>
        /// <returns>Task of RegistrationInputsResponse</returns>
        public async System.Threading.Tasks.Task<RegistrationInputsResponse> ApiGwApiKeyRegistrationInputsPostAsync (string apiKey, RegistrationInputFields basicData = null)
        {
             ApiResponse<RegistrationInputsResponse> localVarResponse = await ApiGwApiKeyRegistrationInputsPostAsyncWithHttpInfo(apiKey, basicData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// inputs This method returns branches list and legal forms list which are available in Tpay.com. These data are required to correctly merchant registration. Branch id and legal form id should be sent in register method.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="basicData">Registration inputs. (optional)</param>
        /// <returns>Task of ApiResponse (RegistrationInputsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistrationInputsResponse>> ApiGwApiKeyRegistrationInputsPostAsyncWithHttpInfo (string apiKey, RegistrationInputFields basicData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RegistrationApi->ApiGwApiKeyRegistrationInputsPost");

            var localVarPath = "/api/gw/{api_key}/registration/inputs";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (basicData != null && basicData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyRegistrationInputsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationInputsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationInputsResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationInputsResponse)));
        }

        /// <summary>
        /// register This method allows register new account in Tpay.com system. In response, the method returns data which can be used to generate new transactions. Optionally method returns access data for API transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="registrtationRegisterData">Register data (optional)</param>
        /// <returns>RegistrationRegisterResponse</returns>
        public RegistrationRegisterResponse ApiGwApiKeyRegistrationRegisterPost (string apiKey, RegisterFields registrtationRegisterData = null)
        {
             ApiResponse<RegistrationRegisterResponse> localVarResponse = ApiGwApiKeyRegistrationRegisterPostWithHttpInfo(apiKey, registrtationRegisterData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// register This method allows register new account in Tpay.com system. In response, the method returns data which can be used to generate new transactions. Optionally method returns access data for API transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="registrtationRegisterData">Register data (optional)</param>
        /// <returns>ApiResponse of RegistrationRegisterResponse</returns>
        public ApiResponse< RegistrationRegisterResponse > ApiGwApiKeyRegistrationRegisterPostWithHttpInfo (string apiKey, RegisterFields registrtationRegisterData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RegistrationApi->ApiGwApiKeyRegistrationRegisterPost");

            var localVarPath = "/api/gw/{api_key}/registration/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (registrtationRegisterData != null && registrtationRegisterData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(registrtationRegisterData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registrtationRegisterData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyRegistrationRegisterPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationRegisterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationRegisterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationRegisterResponse)));
        }

        /// <summary>
        /// register This method allows register new account in Tpay.com system. In response, the method returns data which can be used to generate new transactions. Optionally method returns access data for API transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="registrtationRegisterData">Register data (optional)</param>
        /// <returns>Task of RegistrationRegisterResponse</returns>
        public async System.Threading.Tasks.Task<RegistrationRegisterResponse> ApiGwApiKeyRegistrationRegisterPostAsync (string apiKey, RegisterFields registrtationRegisterData = null)
        {
             ApiResponse<RegistrationRegisterResponse> localVarResponse = await ApiGwApiKeyRegistrationRegisterPostAsyncWithHttpInfo(apiKey, registrtationRegisterData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// register This method allows register new account in Tpay.com system. In response, the method returns data which can be used to generate new transactions. Optionally method returns access data for API transactions
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey">The api key.</param>
        /// <param name="registrtationRegisterData">Register data (optional)</param>
        /// <returns>Task of ApiResponse (RegistrationRegisterResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<RegistrationRegisterResponse>> ApiGwApiKeyRegistrationRegisterPostAsyncWithHttpInfo (string apiKey, RegisterFields registrtationRegisterData = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling RegistrationApi->ApiGwApiKeyRegistrationRegisterPost");

            var localVarPath = "/api/gw/{api_key}/registration/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarPathParams.Add("api_key", Configuration.ApiClient.ParameterToString(apiKey)); // path parameter
            if (registrtationRegisterData != null && registrtationRegisterData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(registrtationRegisterData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = registrtationRegisterData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ApiGwApiKeyRegistrationRegisterPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<RegistrationRegisterResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (RegistrationRegisterResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(RegistrationRegisterResponse)));
        }

    }
}
